
stm32f767_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080030c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a8  20000070  08003134  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  08003134  00020118  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000112a6  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002579  00000000  00000000  00031344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003342  00000000  00000000  000338bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000680  00000000  00000000  00036c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008c0  00000000  00000000  00037280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000041f2  00000000  00000000  00037b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002f36  00000000  00000000  0003bd32  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003ec68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000017dc  00000000  00000000  0003ece4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  000404c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  00040544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08002fbc 	.word	0x08002fbc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08002fbc 	.word	0x08002fbc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_InitTick+0x3c>)
{
 80005f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f8:	7818      	ldrb	r0, [r3, #0]
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 f89c 	bl	8000744 <HAL_SYSTICK_Config>
 800060c:	4604      	mov	r4, r0
 800060e:	b958      	cbnz	r0, 8000628 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000610:	2d0f      	cmp	r5, #15
 8000612:	d809      	bhi.n	8000628 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	4602      	mov	r2, r0
 8000616:	4629      	mov	r1, r5
 8000618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800061c:	f000 f84e 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_InitTick+0x44>)
 8000622:	4620      	mov	r0, r4
 8000624:	601d      	str	r5, [r3, #0]
 8000626:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000628:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_Init>:
{
 8000638:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063a:	2003      	movs	r0, #3
 800063c:	f000 f82c 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffd5 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000646:	f001 fc45 	bl	8001ed4 <HAL_MspInit>
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd08      	pop	{r3, pc}
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000009c 	.word	0x2000009c
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3c03      	subhi	r4, #3
 80006dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006e8:	ea01 0103 	and.w	r1, r1, r3
 80006ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80006f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	ea42 0201 	orr.w	r2, r2, r1
 8000700:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000704:	da05      	bge.n	8000712 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	f000 000f 	and.w	r0, r0, #15
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_NVIC_SetPriority+0x6c>)
 800070e:	541a      	strb	r2, [r3, r0]
 8000710:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800071c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800072c:	0942      	lsrs	r2, r0, #5
 800072e:	2301      	movs	r3, #1
 8000730:	f000 001f 	and.w	r0, r0, #31
 8000734:	fa03 f000 	lsl.w	r0, r3, r0
 8000738:	4b01      	ldr	r3, [pc, #4]	; (8000740 <HAL_NVIC_EnableIRQ+0x14>)
 800073a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800073e:	4770      	bx	lr
 8000740:	e000e100 	.word	0xe000e100

08000744 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	3801      	subs	r0, #1
 8000746:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800074a:	d20a      	bcs.n	8000762 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	21f0      	movs	r1, #240	; 0xf0
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000772:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	bf0c      	ite	eq
 8000778:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800077c:	f022 0204 	bicne.w	r2, r2, #4
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	4770      	bx	lr
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000788:	4770      	bx	lr

0800078a <HAL_SYSTICK_IRQHandler>:
{
 800078a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800078c:	f7ff fffc 	bl	8000788 <HAL_SYSTICK_Callback>
 8000790:	bd08      	pop	{r3, pc}

08000792 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000792:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000796:	2b02      	cmp	r3, #2
 8000798:	d003      	beq.n	80007a2 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800079e:	2001      	movs	r0, #1
 80007a0:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007a2:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80007a4:	2305      	movs	r3, #5
 80007a6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  }

  return HAL_OK;
 80007aa:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80007ac:	6813      	ldr	r3, [r2, #0]
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	4770      	bx	lr
	...

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007bc:	680b      	ldr	r3, [r1, #0]
{
 80007be:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000984 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80007c6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007c8:	4a6c      	ldr	r2, [pc, #432]	; (800097c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007ca:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000988 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80007ce:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d2:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80007d4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007d8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80007dc:	45b6      	cmp	lr, r6
 80007de:	f040 80b3 	bne.w	8000948 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e2:	684c      	ldr	r4, [r1, #4]
 80007e4:	f024 0710 	bic.w	r7, r4, #16
 80007e8:	2f02      	cmp	r7, #2
 80007ea:	d116      	bne.n	800081a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80007ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007f0:	f003 0b07 	and.w	fp, r3, #7
 80007f4:	f04f 0c0f 	mov.w	ip, #15
 80007f8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80007fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000800:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000804:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000808:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800080c:	690d      	ldr	r5, [r1, #16]
 800080e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000812:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000816:	f8ca 5020 	str.w	r5, [sl, #32]
 800081a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800081e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000820:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000824:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000828:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800082c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800082e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000832:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000834:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000836:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800083a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800083e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000842:	d811      	bhi.n	8000868 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000844:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000846:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800084a:	68cf      	ldr	r7, [r1, #12]
 800084c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000850:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000854:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000856:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000858:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800085c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000860:	409f      	lsls	r7, r3
 8000862:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000866:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000868:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800086a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800086c:	688f      	ldr	r7, [r1, #8]
 800086e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000872:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000874:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000876:	00e5      	lsls	r5, r4, #3
 8000878:	d566      	bpl.n	8000948 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800087e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000882:	f003 0e03 	and.w	lr, r3, #3
 8000886:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800088e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000892:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800089a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800089e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80008a2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80008a6:	9503      	str	r5, [sp, #12]
 80008a8:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008aa:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 80008ae:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008b2:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008b6:	4d32      	ldr	r5, [pc, #200]	; (8000980 <HAL_GPIO_Init+0x1c8>)
 80008b8:	42a8      	cmp	r0, r5
 80008ba:	d04c      	beq.n	8000956 <HAL_GPIO_Init+0x19e>
 80008bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c0:	42a8      	cmp	r0, r5
 80008c2:	d04a      	beq.n	800095a <HAL_GPIO_Init+0x1a2>
 80008c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c8:	42a8      	cmp	r0, r5
 80008ca:	d048      	beq.n	800095e <HAL_GPIO_Init+0x1a6>
 80008cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d0:	42a8      	cmp	r0, r5
 80008d2:	d046      	beq.n	8000962 <HAL_GPIO_Init+0x1aa>
 80008d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d8:	42a8      	cmp	r0, r5
 80008da:	d044      	beq.n	8000966 <HAL_GPIO_Init+0x1ae>
 80008dc:	4548      	cmp	r0, r9
 80008de:	d044      	beq.n	800096a <HAL_GPIO_Init+0x1b2>
 80008e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80008e4:	42a8      	cmp	r0, r5
 80008e6:	d042      	beq.n	800096e <HAL_GPIO_Init+0x1b6>
 80008e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ec:	42a8      	cmp	r0, r5
 80008ee:	d040      	beq.n	8000972 <HAL_GPIO_Init+0x1ba>
 80008f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008f4:	42a8      	cmp	r0, r5
 80008f6:	d03e      	beq.n	8000976 <HAL_GPIO_Init+0x1be>
 80008f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008fc:	42a8      	cmp	r0, r5
 80008fe:	bf14      	ite	ne
 8000900:	250a      	movne	r5, #10
 8000902:	2509      	moveq	r5, #9
 8000904:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000908:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800090c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000910:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000912:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000916:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000918:	bf0c      	ite	eq
 800091a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800091c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800091e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000922:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000924:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000926:	bf0c      	ite	eq
 8000928:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800092a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800092c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000930:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000932:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000934:	bf0c      	ite	eq
 8000936:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000938:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800093a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800093c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800093e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000940:	bf54      	ite	pl
 8000942:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000944:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000946:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000948:	3301      	adds	r3, #1
 800094a:	2b10      	cmp	r3, #16
 800094c:	f47f af3f 	bne.w	80007ce <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000950:	b005      	add	sp, #20
 8000952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000956:	2500      	movs	r5, #0
 8000958:	e7d4      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 800095a:	2501      	movs	r5, #1
 800095c:	e7d2      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 800095e:	2502      	movs	r5, #2
 8000960:	e7d0      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 8000962:	2503      	movs	r5, #3
 8000964:	e7ce      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 8000966:	2504      	movs	r5, #4
 8000968:	e7cc      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 800096a:	2505      	movs	r5, #5
 800096c:	e7ca      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 800096e:	2506      	movs	r5, #6
 8000970:	e7c8      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 8000972:	2507      	movs	r5, #7
 8000974:	e7c6      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 8000976:	2508      	movs	r5, #8
 8000978:	e7c4      	b.n	8000904 <HAL_GPIO_Init+0x14c>
 800097a:	bf00      	nop
 800097c:	40013c00 	.word	0x40013c00
 8000980:	40020000 	.word	0x40020000
 8000984:	40023800 	.word	0x40023800
 8000988:	40021400 	.word	0x40021400

0800098c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800098c:	b10a      	cbz	r2, 8000992 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800098e:	6181      	str	r1, [r0, #24]
 8000990:	4770      	bx	lr
 8000992:	0409      	lsls	r1, r1, #16
 8000994:	e7fb      	b.n	800098e <HAL_GPIO_WritePin+0x2>

08000996 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000996:	6943      	ldr	r3, [r0, #20]
 8000998:	4059      	eors	r1, r3
 800099a:	6141      	str	r1, [r0, #20]
 800099c:	4770      	bx	lr
	...

080009a0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80009a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80009a6:	4c19      	ldr	r4, [pc, #100]	; (8000a0c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009be:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c0:	f7ff fe52 	bl	8000668 <HAL_GetTick>
 80009c4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80009c6:	6863      	ldr	r3, [r4, #4]
 80009c8:	03da      	lsls	r2, r3, #15
 80009ca:	d50c      	bpl.n	80009e6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009d4:	f7ff fe48 	bl	8000668 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009d8:	4c0c      	ldr	r4, [pc, #48]	; (8000a0c <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80009da:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009dc:	6863      	ldr	r3, [r4, #4]
 80009de:	039b      	lsls	r3, r3, #14
 80009e0:	d50a      	bpl.n	80009f8 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80009e2:	2000      	movs	r0, #0
 80009e4:	e006      	b.n	80009f4 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009e6:	f7ff fe3f 	bl	8000668 <HAL_GetTick>
 80009ea:	1b40      	subs	r0, r0, r5
 80009ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009f0:	d9e9      	bls.n	80009c6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80009f2:	2003      	movs	r0, #3
}
 80009f4:	b003      	add	sp, #12
 80009f6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009f8:	f7ff fe36 	bl	8000668 <HAL_GetTick>
 80009fc:	1b40      	subs	r0, r0, r5
 80009fe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000a02:	d9eb      	bls.n	80009dc <HAL_PWREx_EnableOverDrive+0x3c>
 8000a04:	e7f5      	b.n	80009f2 <HAL_PWREx_EnableOverDrive+0x52>
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a14:	4604      	mov	r4, r0
 8000a16:	b918      	cbnz	r0, 8000a20 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000a1a:	b002      	add	sp, #8
 8000a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a20:	6803      	ldr	r3, [r0, #0]
 8000a22:	07d8      	lsls	r0, r3, #31
 8000a24:	d410      	bmi.n	8000a48 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	0799      	lsls	r1, r3, #30
 8000a2a:	d45e      	bmi.n	8000aea <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	0719      	lsls	r1, r3, #28
 8000a30:	f100 80a3 	bmi.w	8000b7a <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	075a      	lsls	r2, r3, #29
 8000a38:	f100 80c4 	bmi.w	8000bc4 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a3c:	69a2      	ldr	r2, [r4, #24]
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	f040 812e 	bne.w	8000ca0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000a44:	2000      	movs	r0, #0
 8000a46:	e7e8      	b.n	8000a1a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a48:	4b93      	ldr	r3, [pc, #588]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	f002 020c 	and.w	r2, r2, #12
 8000a50:	2a04      	cmp	r2, #4
 8000a52:	d007      	beq.n	8000a64 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	f002 020c 	and.w	r2, r2, #12
 8000a5a:	2a08      	cmp	r2, #8
 8000a5c:	d10a      	bne.n	8000a74 <HAL_RCC_OscConfig+0x64>
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	025a      	lsls	r2, r3, #9
 8000a62:	d507      	bpl.n	8000a74 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a64:	4b8c      	ldr	r3, [pc, #560]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	039b      	lsls	r3, r3, #14
 8000a6a:	d5dc      	bpl.n	8000a26 <HAL_RCC_OscConfig+0x16>
 8000a6c:	6863      	ldr	r3, [r4, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1d9      	bne.n	8000a26 <HAL_RCC_OscConfig+0x16>
 8000a72:	e7d1      	b.n	8000a18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a74:	6863      	ldr	r3, [r4, #4]
 8000a76:	4d88      	ldr	r5, [pc, #544]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a7c:	d111      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x92>
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a86:	f7ff fdef 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a8a:	4d83      	ldr	r5, [pc, #524]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000a8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	039f      	lsls	r7, r3, #14
 8000a92:	d4c8      	bmi.n	8000a26 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a94:	f7ff fde8 	bl	8000668 <HAL_GetTick>
 8000a98:	1b80      	subs	r0, r0, r6
 8000a9a:	2864      	cmp	r0, #100	; 0x64
 8000a9c:	d9f7      	bls.n	8000a8e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	e7bb      	b.n	8000a1a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa2:	b99b      	cbnz	r3, 8000acc <HAL_RCC_OscConfig+0xbc>
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aaa:	602b      	str	r3, [r5, #0]
 8000aac:	682b      	ldr	r3, [r5, #0]
 8000aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ab4:	f7ff fdd8 	bl	8000668 <HAL_GetTick>
 8000ab8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aba:	682b      	ldr	r3, [r5, #0]
 8000abc:	0398      	lsls	r0, r3, #14
 8000abe:	d5b2      	bpl.n	8000a26 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac0:	f7ff fdd2 	bl	8000668 <HAL_GetTick>
 8000ac4:	1b80      	subs	r0, r0, r6
 8000ac6:	2864      	cmp	r0, #100	; 0x64
 8000ac8:	d9f7      	bls.n	8000aba <HAL_RCC_OscConfig+0xaa>
 8000aca:	e7e8      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	d103      	bne.n	8000adc <HAL_RCC_OscConfig+0xcc>
 8000ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad8:	602b      	str	r3, [r5, #0]
 8000ada:	e7d0      	b.n	8000a7e <HAL_RCC_OscConfig+0x6e>
 8000adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae0:	602b      	str	r3, [r5, #0]
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae8:	e7cc      	b.n	8000a84 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aea:	4b6b      	ldr	r3, [pc, #428]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	f012 0f0c 	tst.w	r2, #12
 8000af2:	d007      	beq.n	8000b04 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	f002 020c 	and.w	r2, r2, #12
 8000afa:	2a08      	cmp	r2, #8
 8000afc:	d111      	bne.n	8000b22 <HAL_RCC_OscConfig+0x112>
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	0259      	lsls	r1, r3, #9
 8000b02:	d40e      	bmi.n	8000b22 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b04:	4b64      	ldr	r3, [pc, #400]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	0792      	lsls	r2, r2, #30
 8000b0a:	d502      	bpl.n	8000b12 <HAL_RCC_OscConfig+0x102>
 8000b0c:	68e2      	ldr	r2, [r4, #12]
 8000b0e:	2a01      	cmp	r2, #1
 8000b10:	d182      	bne.n	8000a18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	6921      	ldr	r1, [r4, #16]
 8000b16:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b1a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b1e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b20:	e784      	b.n	8000a2c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b22:	68e3      	ldr	r3, [r4, #12]
 8000b24:	4d5c      	ldr	r5, [pc, #368]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000b26:	b1bb      	cbz	r3, 8000b58 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b30:	f7ff fd9a 	bl	8000668 <HAL_GetTick>
 8000b34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b36:	682b      	ldr	r3, [r5, #0]
 8000b38:	079f      	lsls	r7, r3, #30
 8000b3a:	d507      	bpl.n	8000b4c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	6922      	ldr	r2, [r4, #16]
 8000b40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b44:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b48:	602b      	str	r3, [r5, #0]
 8000b4a:	e76f      	b.n	8000a2c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fd8c 	bl	8000668 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9ef      	bls.n	8000b36 <HAL_RCC_OscConfig+0x126>
 8000b56:	e7a2      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000b58:	682b      	ldr	r3, [r5, #0]
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b60:	f7ff fd82 	bl	8000668 <HAL_GetTick>
 8000b64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	0798      	lsls	r0, r3, #30
 8000b6a:	f57f af5f 	bpl.w	8000a2c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fd7b 	bl	8000668 <HAL_GetTick>
 8000b72:	1b80      	subs	r0, r0, r6
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x156>
 8000b78:	e791      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b7a:	6963      	ldr	r3, [r4, #20]
 8000b7c:	4d46      	ldr	r5, [pc, #280]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000b7e:	b183      	cbz	r3, 8000ba2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000b80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000b88:	f7ff fd6e 	bl	8000668 <HAL_GetTick>
 8000b8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b90:	079b      	lsls	r3, r3, #30
 8000b92:	f53f af4f 	bmi.w	8000a34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b96:	f7ff fd67 	bl	8000668 <HAL_GetTick>
 8000b9a:	1b80      	subs	r0, r0, r6
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9f6      	bls.n	8000b8e <HAL_RCC_OscConfig+0x17e>
 8000ba0:	e77d      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000ba2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ba4:	f023 0301 	bic.w	r3, r3, #1
 8000ba8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000baa:	f7ff fd5d 	bl	8000668 <HAL_GetTick>
 8000bae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bb2:	079f      	lsls	r7, r3, #30
 8000bb4:	f57f af3e 	bpl.w	8000a34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fd56 	bl	8000668 <HAL_GetTick>
 8000bbc:	1b80      	subs	r0, r0, r6
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d9f6      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x1a0>
 8000bc2:	e76c      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc8:	00d0      	lsls	r0, r2, #3
 8000bca:	d427      	bmi.n	8000c1c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000bce:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000be0:	4d2e      	ldr	r5, [pc, #184]	; (8000c9c <HAL_RCC_OscConfig+0x28c>)
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	05d9      	lsls	r1, r3, #23
 8000be6:	d51b      	bpl.n	8000c20 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000be8:	68a3      	ldr	r3, [r4, #8]
 8000bea:	4d2b      	ldr	r5, [pc, #172]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d127      	bne.n	8000c40 <HAL_RCC_OscConfig+0x230>
 8000bf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf8:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bfc:	f7ff fd34 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c00:	4f25      	ldr	r7, [pc, #148]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000c02:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c06:	079b      	lsls	r3, r3, #30
 8000c08:	d53f      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	f43f af16 	beq.w	8000a3c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_RCC_OscConfig+0x288>)
 8000c12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	e70f      	b.n	8000a3c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	e7df      	b.n	8000be0 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c28:	f7ff fd1e 	bl	8000668 <HAL_GetTick>
 8000c2c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	05da      	lsls	r2, r3, #23
 8000c32:	d4d9      	bmi.n	8000be8 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000c34:	f7ff fd18 	bl	8000668 <HAL_GetTick>
 8000c38:	1bc0      	subs	r0, r0, r7
 8000c3a:	2864      	cmp	r0, #100	; 0x64
 8000c3c:	d9f7      	bls.n	8000c2e <HAL_RCC_OscConfig+0x21e>
 8000c3e:	e72e      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c40:	b9ab      	cbnz	r3, 8000c6e <HAL_RCC_OscConfig+0x25e>
 8000c42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c44:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c48:	f023 0301 	bic.w	r3, r3, #1
 8000c4c:	672b      	str	r3, [r5, #112]	; 0x70
 8000c4e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c50:	f023 0304 	bic.w	r3, r3, #4
 8000c54:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c56:	f7ff fd07 	bl	8000668 <HAL_GetTick>
 8000c5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c5e:	0798      	lsls	r0, r3, #30
 8000c60:	d5d3      	bpl.n	8000c0a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c62:	f7ff fd01 	bl	8000668 <HAL_GetTick>
 8000c66:	1bc0      	subs	r0, r0, r7
 8000c68:	4540      	cmp	r0, r8
 8000c6a:	d9f7      	bls.n	8000c5c <HAL_RCC_OscConfig+0x24c>
 8000c6c:	e717      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c72:	d103      	bne.n	8000c7c <HAL_RCC_OscConfig+0x26c>
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	672b      	str	r3, [r5, #112]	; 0x70
 8000c7a:	e7b9      	b.n	8000bf0 <HAL_RCC_OscConfig+0x1e0>
 8000c7c:	f023 0301 	bic.w	r3, r3, #1
 8000c80:	672b      	str	r3, [r5, #112]	; 0x70
 8000c82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c84:	f023 0304 	bic.w	r3, r3, #4
 8000c88:	e7b5      	b.n	8000bf6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c8a:	f7ff fced 	bl	8000668 <HAL_GetTick>
 8000c8e:	eba0 0008 	sub.w	r0, r0, r8
 8000c92:	42a8      	cmp	r0, r5
 8000c94:	d9b6      	bls.n	8000c04 <HAL_RCC_OscConfig+0x1f4>
 8000c96:	e702      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ca0:	4d24      	ldr	r5, [pc, #144]	; (8000d34 <HAL_RCC_OscConfig+0x324>)
 8000ca2:	68ab      	ldr	r3, [r5, #8]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	f43f aeb5 	beq.w	8000a18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000cae:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cb0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000cb6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cb8:	d12f      	bne.n	8000d1a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8000cba:	f7ff fcd5 	bl	8000668 <HAL_GetTick>
 8000cbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	0199      	lsls	r1, r3, #6
 8000cc4:	d423      	bmi.n	8000d0e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cc6:	6a22      	ldr	r2, [r4, #32]
 8000cc8:	69e3      	ldr	r3, [r4, #28]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000cd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cd4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000cd8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000cda:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000cde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ce0:	4c14      	ldr	r4, [pc, #80]	; (8000d34 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ce2:	0852      	lsrs	r2, r2, #1
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cf2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fcb8 	bl	8000668 <HAL_GetTick>
 8000cf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	019a      	lsls	r2, r3, #6
 8000cfe:	f53f aea1 	bmi.w	8000a44 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d02:	f7ff fcb1 	bl	8000668 <HAL_GetTick>
 8000d06:	1b40      	subs	r0, r0, r5
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	d9f6      	bls.n	8000cfa <HAL_RCC_OscConfig+0x2ea>
 8000d0c:	e6c7      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d0e:	f7ff fcab 	bl	8000668 <HAL_GetTick>
 8000d12:	1b80      	subs	r0, r0, r6
 8000d14:	2802      	cmp	r0, #2
 8000d16:	d9d3      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x2b0>
 8000d18:	e6c1      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fca5 	bl	8000668 <HAL_GetTick>
 8000d1e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	019b      	lsls	r3, r3, #6
 8000d24:	f57f ae8e 	bpl.w	8000a44 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d28:	f7ff fc9e 	bl	8000668 <HAL_GetTick>
 8000d2c:	1b00      	subs	r0, r0, r4
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9f6      	bls.n	8000d20 <HAL_RCC_OscConfig+0x310>
 8000d32:	e6b4      	b.n	8000a9e <HAL_RCC_OscConfig+0x8e>
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d38:	4913      	ldr	r1, [pc, #76]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000d3a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d3c:	688b      	ldr	r3, [r1, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d003      	beq.n	8000d4e <HAL_RCC_GetSysClockFreq+0x16>
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d003      	beq.n	8000d52 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d4c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000d4e:	4810      	ldr	r0, [pc, #64]	; (8000d90 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d50:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d52:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000d54:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d56:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000d5c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d60:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d64:	bf1a      	itte	ne
 8000d66:	480a      	ldrne	r0, [pc, #40]	; (8000d90 <HAL_RCC_GetSysClockFreq+0x58>)
 8000d68:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d6a:	4808      	ldreq	r0, [pc, #32]	; (8000d8c <HAL_RCC_GetSysClockFreq+0x54>)
 8000d6c:	fba1 0100 	umull	r0, r1, r1, r0
 8000d70:	f7ff fab6 	bl	80002e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000d80:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d84:	bd08      	pop	{r3, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	00f42400 	.word	0x00f42400
 8000d90:	007a1200 	.word	0x007a1200

08000d94 <HAL_RCC_ClockConfig>:
{
 8000d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d98:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	b910      	cbnz	r0, 8000da4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
 8000da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000da4:	4a46      	ldr	r2, [pc, #280]	; (8000ec0 <HAL_RCC_ClockConfig+0x12c>)
 8000da6:	6813      	ldr	r3, [r2, #0]
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d328      	bcc.n	8000e02 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000db0:	6821      	ldr	r1, [r4, #0]
 8000db2:	078f      	lsls	r7, r1, #30
 8000db4:	d430      	bmi.n	8000e18 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000db6:	07c8      	lsls	r0, r1, #31
 8000db8:	d443      	bmi.n	8000e42 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dba:	4a41      	ldr	r2, [pc, #260]	; (8000ec0 <HAL_RCC_ClockConfig+0x12c>)
 8000dbc:	6813      	ldr	r3, [r2, #0]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	429d      	cmp	r5, r3
 8000dc4:	d367      	bcc.n	8000e96 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc6:	6822      	ldr	r2, [r4, #0]
 8000dc8:	0751      	lsls	r1, r2, #29
 8000dca:	d470      	bmi.n	8000eae <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dcc:	0713      	lsls	r3, r2, #28
 8000dce:	d507      	bpl.n	8000de0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dd0:	4a3c      	ldr	r2, [pc, #240]	; (8000ec4 <HAL_RCC_ClockConfig+0x130>)
 8000dd2:	6921      	ldr	r1, [r4, #16]
 8000dd4:	6893      	ldr	r3, [r2, #8]
 8000dd6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000dda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dde:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000de0:	f7ff ffaa 	bl	8000d38 <HAL_RCC_GetSysClockFreq>
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <HAL_RCC_ClockConfig+0x130>)
 8000de6:	4a38      	ldr	r2, [pc, #224]	; (8000ec8 <HAL_RCC_ClockConfig+0x134>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dee:	5cd3      	ldrb	r3, [r2, r3]
 8000df0:	40d8      	lsrs	r0, r3
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <HAL_RCC_ClockConfig+0x138>)
 8000df4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fbfa 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e02:	6813      	ldr	r3, [r2, #0]
 8000e04:	f023 030f 	bic.w	r3, r3, #15
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e0c:	6813      	ldr	r3, [r2, #0]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d1c3      	bne.n	8000d9e <HAL_RCC_ClockConfig+0xa>
 8000e16:	e7cb      	b.n	8000db0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e18:	f011 0f04 	tst.w	r1, #4
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_RCC_ClockConfig+0x130>)
 8000e1e:	d003      	beq.n	8000e28 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000e26:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e28:	070e      	lsls	r6, r1, #28
 8000e2a:	d503      	bpl.n	8000e34 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000e32:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	68a0      	ldr	r0, [r4, #8]
 8000e38:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e3c:	4302      	orrs	r2, r0
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	e7b9      	b.n	8000db6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e42:	6861      	ldr	r1, [r4, #4]
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <HAL_RCC_ClockConfig+0x130>)
 8000e46:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e48:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e4a:	d11c      	bne.n	8000e86 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e50:	d0a5      	beq.n	8000d9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e52:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e54:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e58:	4e1a      	ldr	r6, [pc, #104]	; (8000ec4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5a:	f022 0203 	bic.w	r2, r2, #3
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000e62:	f7ff fc01 	bl	8000668 <HAL_GetTick>
 8000e66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e68:	68b3      	ldr	r3, [r6, #8]
 8000e6a:	6862      	ldr	r2, [r4, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e74:	d0a1      	beq.n	8000dba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e76:	f7ff fbf7 	bl	8000668 <HAL_GetTick>
 8000e7a:	1bc0      	subs	r0, r0, r7
 8000e7c:	4540      	cmp	r0, r8
 8000e7e:	d9f3      	bls.n	8000e68 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000e80:	2003      	movs	r0, #3
}
 8000e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e86:	2902      	cmp	r1, #2
 8000e88:	d102      	bne.n	8000e90 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e8a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e8e:	e7df      	b.n	8000e50 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e90:	f012 0f02 	tst.w	r2, #2
 8000e94:	e7dc      	b.n	8000e50 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e96:	6813      	ldr	r3, [r2, #0]
 8000e98:	f023 030f 	bic.w	r3, r3, #15
 8000e9c:	432b      	orrs	r3, r5
 8000e9e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea0:	6813      	ldr	r3, [r2, #0]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	429d      	cmp	r5, r3
 8000ea8:	f47f af79 	bne.w	8000d9e <HAL_RCC_ClockConfig+0xa>
 8000eac:	e78b      	b.n	8000dc6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eae:	4905      	ldr	r1, [pc, #20]	; (8000ec4 <HAL_RCC_ClockConfig+0x130>)
 8000eb0:	68e0      	ldr	r0, [r4, #12]
 8000eb2:	688b      	ldr	r3, [r1, #8]
 8000eb4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000eb8:	4303      	orrs	r3, r0
 8000eba:	608b      	str	r3, [r1, #8]
 8000ebc:	e786      	b.n	8000dcc <HAL_RCC_ClockConfig+0x38>
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	08002ff2 	.word	0x08002ff2
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ed0:	4b01      	ldr	r3, [pc, #4]	; (8000ed8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eea:	6810      	ldr	r0, [r2, #0]
}
 8000eec:	40d8      	lsrs	r0, r3
 8000eee:	4770      	bx	lr
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	08003002 	.word	0x08003002
 8000ef8:	20000008 	.word	0x20000008

08000efc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f0a:	6810      	ldr	r0, [r2, #0]
}
 8000f0c:	40d8      	lsrs	r0, r3
 8000f0e:	4770      	bx	lr
 8000f10:	40023800 	.word	0x40023800
 8000f14:	08003002 	.word	0x08003002
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000f20:	6802      	ldr	r2, [r0, #0]
{
 8000f22:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000f24:	f012 0601 	ands.w	r6, r2, #1
 8000f28:	d00b      	beq.n	8000f42 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000f2a:	4bba      	ldr	r3, [pc, #744]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f2c:	6899      	ldr	r1, [r3, #8]
 8000f2e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8000f32:	6099      	str	r1, [r3, #8]
 8000f34:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000f36:	6899      	ldr	r1, [r3, #8]
 8000f38:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8000f3a:	fab6 f686 	clz	r6, r6
 8000f3e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000f40:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000f42:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8000f46:	d012      	beq.n	8000f6e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f48:	49b2      	ldr	r1, [pc, #712]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f4a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000f4c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000f50:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8000f58:	bf08      	it	eq
 8000f5a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f5c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000f60:	bf16      	itet	ne
 8000f62:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8000f66:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000f68:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000f6e:	02d7      	lsls	r7, r2, #11
 8000f70:	d510      	bpl.n	8000f94 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000f72:	48a8      	ldr	r0, [pc, #672]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000f74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000f76:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000f7a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000f7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000f82:	ea43 0301 	orr.w	r3, r3, r1
 8000f86:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000f8a:	f000 81a9 	beq.w	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	bf08      	it	eq
 8000f92:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8000f94:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000f98:	bf18      	it	ne
 8000f9a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000f9c:	0690      	lsls	r0, r2, #26
 8000f9e:	d531      	bpl.n	8001004 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	4b9c      	ldr	r3, [pc, #624]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000fa2:	4f9d      	ldr	r7, [pc, #628]	; (8001218 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fbe:	f7ff fb53 	bl	8000668 <HAL_GetTick>
 8000fc2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	05d9      	lsls	r1, r3, #23
 8000fc8:	f140 818c 	bpl.w	80012e4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000fcc:	4f91      	ldr	r7, [pc, #580]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fd0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000fd4:	f040 8191 	bne.w	80012fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000fd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fda:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000fde:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000fe2:	4a8c      	ldr	r2, [pc, #560]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8000fe4:	f040 81af 	bne.w	8001346 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8000fe8:	6891      	ldr	r1, [r2, #8]
 8000fea:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000fee:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000ff2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000ff6:	4301      	orrs	r1, r0
 8000ff8:	6091      	str	r1, [r2, #8]
 8000ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffe:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001000:	430b      	orrs	r3, r1
 8001002:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	06df      	lsls	r7, r3, #27
 8001008:	d50c      	bpl.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800100a:	4a82      	ldr	r2, [pc, #520]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800100c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001010:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001014:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001018:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800101c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800101e:	4301      	orrs	r1, r0
 8001020:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001024:	0458      	lsls	r0, r3, #17
 8001026:	d508      	bpl.n	800103a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001028:	497a      	ldr	r1, [pc, #488]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800102a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800102c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001030:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001034:	4302      	orrs	r2, r0
 8001036:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800103a:	0419      	lsls	r1, r3, #16
 800103c:	d508      	bpl.n	8001050 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800103e:	4975      	ldr	r1, [pc, #468]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001040:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001042:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001046:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800104a:	4302      	orrs	r2, r0
 800104c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001050:	03da      	lsls	r2, r3, #15
 8001052:	d508      	bpl.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001054:	496f      	ldr	r1, [pc, #444]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001056:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001058:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800105c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001060:	4302      	orrs	r2, r0
 8001062:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001066:	039f      	lsls	r7, r3, #14
 8001068:	d508      	bpl.n	800107c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800106a:	496a      	ldr	r1, [pc, #424]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800106c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800106e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001072:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001076:	4302      	orrs	r2, r0
 8001078:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800107c:	0658      	lsls	r0, r3, #25
 800107e:	d508      	bpl.n	8001092 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001080:	4964      	ldr	r1, [pc, #400]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001082:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001084:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001088:	f022 0203 	bic.w	r2, r2, #3
 800108c:	4302      	orrs	r2, r0
 800108e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001092:	0619      	lsls	r1, r3, #24
 8001094:	d508      	bpl.n	80010a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001096:	495f      	ldr	r1, [pc, #380]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001098:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800109a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800109e:	f022 020c 	bic.w	r2, r2, #12
 80010a2:	4302      	orrs	r2, r0
 80010a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80010a8:	05da      	lsls	r2, r3, #23
 80010aa:	d508      	bpl.n	80010be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80010ac:	4959      	ldr	r1, [pc, #356]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010ae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80010b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80010b8:	4302      	orrs	r2, r0
 80010ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80010be:	059f      	lsls	r7, r3, #22
 80010c0:	d508      	bpl.n	80010d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80010c2:	4954      	ldr	r1, [pc, #336]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80010c6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80010ce:	4302      	orrs	r2, r0
 80010d0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80010d4:	0558      	lsls	r0, r3, #21
 80010d6:	d508      	bpl.n	80010ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80010d8:	494e      	ldr	r1, [pc, #312]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010e4:	4302      	orrs	r2, r0
 80010e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80010ea:	0519      	lsls	r1, r3, #20
 80010ec:	d508      	bpl.n	8001100 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80010ee:	4949      	ldr	r1, [pc, #292]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80010f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80010f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80010fa:	4302      	orrs	r2, r0
 80010fc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001100:	04da      	lsls	r2, r3, #19
 8001102:	d508      	bpl.n	8001116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001104:	4943      	ldr	r1, [pc, #268]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001106:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001108:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800110c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001110:	4302      	orrs	r2, r0
 8001112:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001116:	049f      	lsls	r7, r3, #18
 8001118:	d508      	bpl.n	800112c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800111a:	493e      	ldr	r1, [pc, #248]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800111c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800111e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001122:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001126:	4302      	orrs	r2, r0
 8001128:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800112c:	0258      	lsls	r0, r3, #9
 800112e:	d508      	bpl.n	8001142 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001130:	4938      	ldr	r1, [pc, #224]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001132:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001134:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001138:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800113c:	4302      	orrs	r2, r0
 800113e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001142:	0299      	lsls	r1, r3, #10
 8001144:	d50c      	bpl.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001146:	4833      	ldr	r0, [pc, #204]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001148:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800114a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800114e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001152:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001156:	bf08      	it	eq
 8001158:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800115a:	430a      	orrs	r2, r1
 800115c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001160:	f013 0f08 	tst.w	r3, #8
 8001164:	bf18      	it	ne
 8001166:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001168:	035a      	lsls	r2, r3, #13
 800116a:	d508      	bpl.n	800117e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800116c:	4929      	ldr	r1, [pc, #164]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800116e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001170:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001174:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001178:	4302      	orrs	r2, r0
 800117a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800117e:	021f      	lsls	r7, r3, #8
 8001180:	d509      	bpl.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001182:	4924      	ldr	r1, [pc, #144]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001184:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001188:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800118c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001190:	4302      	orrs	r2, r0
 8001192:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001196:	0158      	lsls	r0, r3, #5
 8001198:	d509      	bpl.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800119a:	491e      	ldr	r1, [pc, #120]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800119c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80011a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80011a4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80011a8:	4302      	orrs	r2, r0
 80011aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80011ae:	0119      	lsls	r1, r3, #4
 80011b0:	d509      	bpl.n	80011c6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80011b2:	4918      	ldr	r1, [pc, #96]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80011b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80011b8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80011bc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80011c0:	4302      	orrs	r2, r0
 80011c2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80011c6:	00da      	lsls	r2, r3, #3
 80011c8:	d509      	bpl.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80011ca:	4912      	ldr	r1, [pc, #72]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80011cc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80011d0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80011d4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80011d8:	4302      	orrs	r2, r0
 80011da:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80011de:	2e01      	cmp	r6, #1
 80011e0:	f000 80b5 	beq.w	800134e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80011e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011e8:	f000 80b1 	beq.w	800134e <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80011ec:	2d01      	cmp	r5, #1
 80011ee:	d175      	bne.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80011f0:	4d08      	ldr	r5, [pc, #32]	; (8001214 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011fa:	f7ff fa35 	bl	8000668 <HAL_GetTick>
 80011fe:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	009f      	lsls	r7, r3, #2
 8001204:	f100 8127 	bmi.w	8001456 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001208:	6821      	ldr	r1, [r4, #0]
 800120a:	030e      	lsls	r6, r1, #12
 800120c:	d506      	bpl.n	800121c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800120e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001210:	b143      	cbz	r3, 8001224 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001212:	e003      	b.n	800121c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000
 800121c:	02cd      	lsls	r5, r1, #11
 800121e:	d51d      	bpl.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001222:	b9db      	cbnz	r3, 800125c <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001224:	4a93      	ldr	r2, [pc, #588]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001226:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800122a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800122e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001232:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001236:	4303      	orrs	r3, r0
 8001238:	6960      	ldr	r0, [r4, #20]
 800123a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800123e:	69a0      	ldr	r0, [r4, #24]
 8001240:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001248:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800124c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800124e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001252:	3801      	subs	r0, #1
 8001254:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001258:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800125c:	0288      	lsls	r0, r1, #10
 800125e:	d515      	bpl.n	800128c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001260:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001266:	d111      	bne.n	800128c <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001268:	4a82      	ldr	r2, [pc, #520]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800126a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800126e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001272:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001276:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800127a:	4303      	orrs	r3, r0
 800127c:	6960      	ldr	r0, [r4, #20]
 800127e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001282:	6a20      	ldr	r0, [r4, #32]
 8001284:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800128c:	070a      	lsls	r2, r1, #28
 800128e:	d519      	bpl.n	80012c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001290:	4978      	ldr	r1, [pc, #480]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001292:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001296:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800129a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800129e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a2:	4313      	orrs	r3, r2
 80012a4:	6962      	ldr	r2, [r4, #20]
 80012a6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012aa:	69e2      	ldr	r2, [r4, #28]
 80012ac:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80012b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80012b4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80012b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80012be:	4313      	orrs	r3, r2
 80012c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80012c4:	4c6b      	ldr	r4, [pc, #428]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012ce:	f7ff f9cb 	bl	8000668 <HAL_GetTick>
 80012d2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	f140 80c4 	bpl.w	8001464 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
 80012de:	e009      	b.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80012e0:	2601      	movs	r6, #1
 80012e2:	e657      	b.n	8000f94 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e4:	f7ff f9c0 	bl	8000668 <HAL_GetTick>
 80012e8:	eba0 0008 	sub.w	r0, r0, r8
 80012ec:	2864      	cmp	r0, #100	; 0x64
 80012ee:	f67f ae69 	bls.w	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80012f2:	2003      	movs	r0, #3
}
 80012f4:	b003      	add	sp, #12
 80012f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001300:	4293      	cmp	r3, r2
 8001302:	f43f ae69 	beq.w	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001308:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800130a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800130e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001312:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001314:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001316:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800131a:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800131c:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800131e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001320:	07da      	lsls	r2, r3, #31
 8001322:	f57f ae59 	bpl.w	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001326:	f7ff f99f 	bl	8000668 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800132e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001332:	079b      	lsls	r3, r3, #30
 8001334:	f53f ae50 	bmi.w	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff f996 	bl	8000668 <HAL_GetTick>
 800133c:	eba0 0008 	sub.w	r0, r0, r8
 8001340:	4548      	cmp	r0, r9
 8001342:	d9f5      	bls.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001344:	e7d5      	b.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001346:	6891      	ldr	r1, [r2, #8]
 8001348:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800134c:	e654      	b.n	8000ff8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800134e:	4e49      	ldr	r6, [pc, #292]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001350:	6833      	ldr	r3, [r6, #0]
 8001352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001356:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001358:	f7ff f986 	bl	8000668 <HAL_GetTick>
 800135c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800135e:	6833      	ldr	r3, [r6, #0]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	d472      	bmi.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	07d7      	lsls	r7, r2, #31
 8001368:	d512      	bpl.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800136a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800136c:	b983      	cbnz	r3, 8001390 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800136e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001372:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800137a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800137e:	430b      	orrs	r3, r1
 8001380:	6861      	ldr	r1, [r4, #4]
 8001382:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001386:	68a1      	ldr	r1, [r4, #8]
 8001388:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800138c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001390:	0316      	lsls	r6, r2, #12
 8001392:	d503      	bpl.n	800139c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800139a:	d005      	beq.n	80013a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800139c:	02d0      	lsls	r0, r2, #11
 800139e:	d51e      	bpl.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80013a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a6:	d11a      	bne.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80013a8:	4932      	ldr	r1, [pc, #200]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80013aa:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013ae:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80013b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b6:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80013ba:	4303      	orrs	r3, r0
 80013bc:	6860      	ldr	r0, [r4, #4]
 80013be:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80013c2:	68e0      	ldr	r0, [r4, #12]
 80013c4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80013c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80013cc:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80013d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013d2:	f020 001f 	bic.w	r0, r0, #31
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4303      	orrs	r3, r0
 80013da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80013de:	01d1      	lsls	r1, r2, #7
 80013e0:	d511      	bpl.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80013e2:	4924      	ldr	r1, [pc, #144]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80013e4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013e8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80013ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80013f0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80013f4:	4303      	orrs	r3, r0
 80013f6:	6860      	ldr	r0, [r4, #4]
 80013f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80013fc:	6920      	ldr	r0, [r4, #16]
 80013fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001402:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001406:	0192      	lsls	r2, r2, #6
 8001408:	d50d      	bpl.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	6862      	ldr	r2, [r4, #4]
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001414:	68e2      	ldr	r2, [r4, #12]
 8001416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800141a:	68a2      	ldr	r2, [r4, #8]
 800141c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001422:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001426:	4e13      	ldr	r6, [pc, #76]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001428:	6833      	ldr	r3, [r6, #0]
 800142a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800142e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001430:	f7ff f91a 	bl	8000668 <HAL_GetTick>
 8001434:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001436:	6833      	ldr	r3, [r6, #0]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	f53f aed7 	bmi.w	80011ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800143e:	f7ff f913 	bl	8000668 <HAL_GetTick>
 8001442:	1bc0      	subs	r0, r0, r7
 8001444:	2864      	cmp	r0, #100	; 0x64
 8001446:	d9f6      	bls.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001448:	e753      	b.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800144a:	f7ff f90d 	bl	8000668 <HAL_GetTick>
 800144e:	1bc0      	subs	r0, r0, r7
 8001450:	2864      	cmp	r0, #100	; 0x64
 8001452:	d984      	bls.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001454:	e74d      	b.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001456:	f7ff f907 	bl	8000668 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	2864      	cmp	r0, #100	; 0x64
 800145e:	f67f aecf 	bls.w	8001200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001462:	e746      	b.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001464:	f7ff f900 	bl	8000668 <HAL_GetTick>
 8001468:	1b40      	subs	r0, r0, r5
 800146a:	2864      	cmp	r0, #100	; 0x64
 800146c:	f67f af32 	bls.w	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001470:	e73f      	b.n	80012f2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001478:	6803      	ldr	r3, [r0, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001480:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800148a:	2320      	movs	r3, #32
 800148c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001490:	4770      	bx	lr

08001492 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001492:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001496:	2b20      	cmp	r3, #32
 8001498:	d13d      	bne.n	8001516 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 800149a:	2900      	cmp	r1, #0
 800149c:	d039      	beq.n	8001512 <HAL_UART_Receive_IT+0x80>
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d037      	beq.n	8001512 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 80014a2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d035      	beq.n	8001516 <HAL_UART_Receive_IT+0x84>
 80014aa:	2301      	movs	r3, #1
    huart->pRxBuffPtr = pData;
 80014ac:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80014ae:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    __HAL_LOCK(huart);
 80014b2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 80014b6:	6883      	ldr	r3, [r0, #8]
    huart->RxXferCount = Size;
 80014b8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80014bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c0:	d119      	bne.n	80014f6 <HAL_UART_Receive_IT+0x64>
 80014c2:	6903      	ldr	r3, [r0, #16]
 80014c4:	b9ab      	cbnz	r3, 80014f2 <HAL_UART_Receive_IT+0x60>
 80014c6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80014ca:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ce:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014d0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014d4:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014d8:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 80014da:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    return HAL_OK;
 80014de:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014e0:	6891      	ldr	r1, [r2, #8]
 80014e2:	f041 0101 	orr.w	r1, r1, #1
 80014e6:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80014e8:	6811      	ldr	r1, [r2, #0]
 80014ea:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80014ee:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 80014f0:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80014f2:	23ff      	movs	r3, #255	; 0xff
 80014f4:	e7e9      	b.n	80014ca <HAL_UART_Receive_IT+0x38>
 80014f6:	b923      	cbnz	r3, 8001502 <HAL_UART_Receive_IT+0x70>
 80014f8:	6903      	ldr	r3, [r0, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f9      	beq.n	80014f2 <HAL_UART_Receive_IT+0x60>
 80014fe:	237f      	movs	r3, #127	; 0x7f
 8001500:	e7e3      	b.n	80014ca <HAL_UART_Receive_IT+0x38>
 8001502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001506:	d1e2      	bne.n	80014ce <HAL_UART_Receive_IT+0x3c>
 8001508:	6903      	ldr	r3, [r0, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f7      	beq.n	80014fe <HAL_UART_Receive_IT+0x6c>
 800150e:	233f      	movs	r3, #63	; 0x3f
 8001510:	e7db      	b.n	80014ca <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8001512:	2001      	movs	r0, #1
 8001514:	4770      	bx	lr
    return HAL_BUSY;
 8001516:	2002      	movs	r0, #2
}
 8001518:	4770      	bx	lr

0800151a <UART_WaitOnFlagUntilTimeout>:
{
 800151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800151e:	9d06      	ldr	r5, [sp, #24]
 8001520:	4604      	mov	r4, r0
 8001522:	460f      	mov	r7, r1
 8001524:	4616      	mov	r6, r2
 8001526:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001528:	6821      	ldr	r1, [r4, #0]
 800152a:	69ca      	ldr	r2, [r1, #28]
 800152c:	ea37 0302 	bics.w	r3, r7, r2
 8001530:	bf0c      	ite	eq
 8001532:	2201      	moveq	r2, #1
 8001534:	2200      	movne	r2, #0
 8001536:	42b2      	cmp	r2, r6
 8001538:	d002      	beq.n	8001540 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800153a:	2000      	movs	r0, #0
}
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001540:	1c6b      	adds	r3, r5, #1
 8001542:	d0f2      	beq.n	800152a <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001544:	b99d      	cbnz	r5, 800156e <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001546:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001548:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001550:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	f022 0201 	bic.w	r2, r2, #1
 8001558:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800155a:	2320      	movs	r3, #32
 800155c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001560:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001564:	2300      	movs	r3, #0
 8001566:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800156a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800156e:	f7ff f87b 	bl	8000668 <HAL_GetTick>
 8001572:	eba0 0008 	sub.w	r0, r0, r8
 8001576:	4285      	cmp	r5, r0
 8001578:	d8d6      	bhi.n	8001528 <UART_WaitOnFlagUntilTimeout+0xe>
 800157a:	e7e4      	b.n	8001546 <UART_WaitOnFlagUntilTimeout+0x2c>

0800157c <HAL_UART_Transmit>:
{
 800157c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001580:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001582:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800158a:	2b20      	cmp	r3, #32
{
 800158c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800158e:	d14c      	bne.n	800162a <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001590:	2900      	cmp	r1, #0
 8001592:	d048      	beq.n	8001626 <HAL_UART_Transmit+0xaa>
 8001594:	2a00      	cmp	r2, #0
 8001596:	d046      	beq.n	8001626 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001598:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800159c:	2b01      	cmp	r3, #1
 800159e:	d044      	beq.n	800162a <HAL_UART_Transmit+0xae>
 80015a0:	2301      	movs	r3, #1
 80015a2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015aa:	2321      	movs	r3, #33	; 0x21
 80015ac:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80015b0:	f7ff f85a 	bl	8000668 <HAL_GetTick>
 80015b4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80015b6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80015ba:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80015be:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80015c2:	b292      	uxth	r2, r2
 80015c4:	b962      	cbnz	r2, 80015e0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015c6:	9700      	str	r7, [sp, #0]
 80015c8:	4633      	mov	r3, r6
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff ffa4 	bl	800151a <UART_WaitOnFlagUntilTimeout>
 80015d2:	b998      	cbnz	r0, 80015fc <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80015d4:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80015d6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80015da:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 80015de:	e00e      	b.n	80015fe <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80015e0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015e4:	2200      	movs	r2, #0
 80015e6:	9700      	str	r7, [sp, #0]
 80015e8:	2180      	movs	r1, #128	; 0x80
      huart->TxXferCount--;
 80015ea:	3b01      	subs	r3, #1
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ec:	4620      	mov	r0, r4
      huart->TxXferCount--;
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015f4:	4633      	mov	r3, r6
 80015f6:	f7ff ff90 	bl	800151a <UART_WaitOnFlagUntilTimeout>
 80015fa:	b118      	cbz	r0, 8001604 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80015fc:	2003      	movs	r0, #3
}
 80015fe:	b002      	add	sp, #8
 8001600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001604:	68a3      	ldr	r3, [r4, #8]
 8001606:	6822      	ldr	r2, [r4, #0]
 8001608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800160c:	d107      	bne.n	800161e <HAL_UART_Transmit+0xa2>
 800160e:	6923      	ldr	r3, [r4, #16]
 8001610:	b92b      	cbnz	r3, 800161e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001612:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800161a:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 800161c:	e7cf      	b.n	80015be <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800161e:	782b      	ldrb	r3, [r5, #0]
 8001620:	3501      	adds	r5, #1
 8001622:	6293      	str	r3, [r2, #40]	; 0x28
 8001624:	e7cb      	b.n	80015be <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001626:	2001      	movs	r0, #1
 8001628:	e7e9      	b.n	80015fe <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800162a:	2002      	movs	r0, #2
 800162c:	e7e7      	b.n	80015fe <HAL_UART_Transmit+0x82>

0800162e <HAL_UART_TxCpltCallback>:
 800162e:	4770      	bx	lr

08001630 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001630:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001634:	6802      	ldr	r2, [r0, #0]
 8001636:	2b22      	cmp	r3, #34	; 0x22
{
 8001638:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800163a:	d12a      	bne.n	8001692 <UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800163c:	6883      	ldr	r3, [r0, #8]
  uint16_t uhMask = huart->Mask;
 800163e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001646:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001648:	d11d      	bne.n	8001686 <UART_Receive_IT+0x56>
 800164a:	6904      	ldr	r4, [r0, #16]
 800164c:	b9dc      	cbnz	r4, 8001686 <UART_Receive_IT+0x56>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800164e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001650:	4011      	ands	r1, r2
 8001652:	f823 1b02 	strh.w	r1, [r3], #2
      huart->pRxBuffPtr +=2;
 8001656:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8001658:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 800165c:	3c01      	subs	r4, #1
 800165e:	b2a4      	uxth	r4, r4
 8001660:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8001664:	b96c      	cbnz	r4, 8001682 <UART_Receive_IT+0x52>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001666:	6803      	ldr	r3, [r0, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800166e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	609a      	str	r2, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001678:	2320      	movs	r3, #32
 800167a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 800167e:	f000 fc0d 	bl	8001e9c <HAL_UART_RxCpltCallback>
    return HAL_OK;
 8001682:	2000      	movs	r0, #0
}
 8001684:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001688:	1c5c      	adds	r4, r3, #1
 800168a:	4011      	ands	r1, r2
 800168c:	6544      	str	r4, [r0, #84]	; 0x54
 800168e:	7019      	strb	r1, [r3, #0]
 8001690:	e7e2      	b.n	8001658 <UART_Receive_IT+0x28>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001692:	6993      	ldr	r3, [r2, #24]
    return HAL_BUSY;
 8001694:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6193      	str	r3, [r2, #24]
    return HAL_BUSY;
 800169c:	bd10      	pop	{r4, pc}

0800169e <HAL_UART_ErrorCallback>:
{
 800169e:	4770      	bx	lr

080016a0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80016a0:	6803      	ldr	r3, [r0, #0]
 80016a2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016a4:	6819      	ldr	r1, [r3, #0]
{
 80016a6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80016a8:	0716      	lsls	r6, r2, #28
{
 80016aa:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016ac:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 80016ae:	d107      	bne.n	80016c0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016b0:	0695      	lsls	r5, r2, #26
 80016b2:	d563      	bpl.n	800177c <HAL_UART_IRQHandler+0xdc>
 80016b4:	068e      	lsls	r6, r1, #26
 80016b6:	d561      	bpl.n	800177c <HAL_UART_IRQHandler+0xdc>
}
 80016b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80016bc:	f7ff bfb8 	b.w	8001630 <UART_Receive_IT>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80016c0:	f015 0001 	ands.w	r0, r5, #1
 80016c4:	d102      	bne.n	80016cc <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80016c6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80016ca:	d057      	beq.n	800177c <HAL_UART_IRQHandler+0xdc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016cc:	07d5      	lsls	r5, r2, #31
 80016ce:	d507      	bpl.n	80016e0 <HAL_UART_IRQHandler+0x40>
 80016d0:	05ce      	lsls	r6, r1, #23
 80016d2:	d505      	bpl.n	80016e0 <HAL_UART_IRQHandler+0x40>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80016d4:	2501      	movs	r5, #1
 80016d6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016d8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80016da:	f045 0501 	orr.w	r5, r5, #1
 80016de:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016e0:	0795      	lsls	r5, r2, #30
 80016e2:	d506      	bpl.n	80016f2 <HAL_UART_IRQHandler+0x52>
 80016e4:	b128      	cbz	r0, 80016f2 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80016e6:	2502      	movs	r5, #2
 80016e8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80016ea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80016ec:	f045 0504 	orr.w	r5, r5, #4
 80016f0:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016f2:	0756      	lsls	r6, r2, #29
 80016f4:	d506      	bpl.n	8001704 <HAL_UART_IRQHandler+0x64>
 80016f6:	b128      	cbz	r0, 8001704 <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80016f8:	2504      	movs	r5, #4
 80016fa:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016fc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80016fe:	f045 0502 	orr.w	r5, r5, #2
 8001702:	66e5      	str	r5, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001704:	0715      	lsls	r5, r2, #28
 8001706:	d507      	bpl.n	8001718 <HAL_UART_IRQHandler+0x78>
 8001708:	068e      	lsls	r6, r1, #26
 800170a:	d400      	bmi.n	800170e <HAL_UART_IRQHandler+0x6e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800170c:	b120      	cbz	r0, 8001718 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800170e:	2008      	movs	r0, #8
 8001710:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001712:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001714:	4303      	orrs	r3, r0
 8001716:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001718:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06a      	beq.n	80017f4 <HAL_UART_IRQHandler+0x154>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800171e:	0695      	lsls	r5, r2, #26
 8001720:	d504      	bpl.n	800172c <HAL_UART_IRQHandler+0x8c>
 8001722:	0688      	lsls	r0, r1, #26
 8001724:	d502      	bpl.n	800172c <HAL_UART_IRQHandler+0x8c>
        UART_Receive_IT(huart);
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff82 	bl	8001630 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800172c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 800172e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001730:	0719      	lsls	r1, r3, #28
 8001732:	d404      	bmi.n	800173e <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001738:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800173c:	d01a      	beq.n	8001774 <HAL_UART_IRQHandler+0xd4>
        UART_EndRxTransfer(huart);
 800173e:	f7ff fe9b 	bl	8001478 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	0652      	lsls	r2, r2, #25
 8001748:	d510      	bpl.n	800176c <HAL_UART_IRQHandler+0xcc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800174a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800174c:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800174e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001752:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001754:	b150      	cbz	r0, 800176c <HAL_UART_IRQHandler+0xcc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <HAL_UART_IRQHandler+0x158>)
 8001758:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800175a:	f7ff f81a 	bl	8000792 <HAL_DMA_Abort_IT>
 800175e:	2800      	cmp	r0, #0
 8001760:	d048      	beq.n	80017f4 <HAL_UART_IRQHandler+0x154>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001762:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8001764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001768:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800176a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff ff96 	bl	800169e <HAL_UART_ErrorCallback>
 8001772:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001774:	f7ff ff93 	bl	800169e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001778:	66e5      	str	r5, [r4, #108]	; 0x6c
 800177a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800177c:	0616      	lsls	r6, r2, #24
 800177e:	d52b      	bpl.n	80017d8 <HAL_UART_IRQHandler+0x138>
 8001780:	060d      	lsls	r5, r1, #24
 8001782:	d529      	bpl.n	80017d8 <HAL_UART_IRQHandler+0x138>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001784:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8001788:	2a21      	cmp	r2, #33	; 0x21
 800178a:	d133      	bne.n	80017f4 <HAL_UART_IRQHandler+0x154>
    if(huart->TxXferCount == 0U)
 800178c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001790:	b292      	uxth	r2, r2
 8001792:	b942      	cbnz	r2, 80017a6 <HAL_UART_IRQHandler+0x106>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800179a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	bd70      	pop	{r4, r5, r6, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017a6:	68a2      	ldr	r2, [r4, #8]
 80017a8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80017ae:	d10e      	bne.n	80017ce <HAL_UART_IRQHandler+0x12e>
 80017b0:	6921      	ldr	r1, [r4, #16]
 80017b2:	b961      	cbnz	r1, 80017ce <HAL_UART_IRQHandler+0x12e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80017b4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80017b8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80017bc:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80017be:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 80017c0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80017ce:	1c51      	adds	r1, r2, #1
 80017d0:	64e1      	str	r1, [r4, #76]	; 0x4c
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
 80017d6:	e7f3      	b.n	80017c0 <HAL_UART_IRQHandler+0x120>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80017d8:	0650      	lsls	r0, r2, #25
 80017da:	d50b      	bpl.n	80017f4 <HAL_UART_IRQHandler+0x154>
 80017dc:	064a      	lsls	r2, r1, #25
 80017de:	d509      	bpl.n	80017f4 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80017e0:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80017e2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80017e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80017ea:	2320      	movs	r3, #32
 80017ec:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80017f0:	f7ff ff1d 	bl	800162e <HAL_UART_TxCpltCallback>
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
 80017f6:	bf00      	nop
 80017f8:	080017fd 	.word	0x080017fd

080017fc <UART_DMAAbortOnError>:
{
 80017fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80017fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001806:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800180a:	f7ff ff48 	bl	800169e <HAL_UART_ErrorCallback>
 800180e:	bd08      	pop	{r3, pc}

08001810 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001810:	b538      	push	{r3, r4, r5, lr}
 8001812:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001814:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001816:	69c3      	ldr	r3, [r0, #28]
 8001818:	6921      	ldr	r1, [r4, #16]
 800181a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800181c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800181e:	430a      	orrs	r2, r1
 8001820:	6961      	ldr	r1, [r4, #20]
 8001822:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001824:	4993      	ldr	r1, [pc, #588]	; (8001a74 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001826:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001828:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800182a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800182c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800182e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001830:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001832:	686a      	ldr	r2, [r5, #4]
 8001834:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001838:	430a      	orrs	r2, r1
 800183a:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800183c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800183e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001840:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001842:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001846:	430a      	orrs	r2, r1
 8001848:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800184a:	4a8b      	ldr	r2, [pc, #556]	; (8001a78 <UART_SetConfig+0x268>)
 800184c:	4295      	cmp	r5, r2
 800184e:	d119      	bne.n	8001884 <UART_SetConfig+0x74>
 8001850:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001854:	4989      	ldr	r1, [pc, #548]	; (8001a7c <UART_SetConfig+0x26c>)
 8001856:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800185a:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800185e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001862:	5c8a      	ldrb	r2, [r1, r2]
 8001864:	f040 80b3 	bne.w	80019ce <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8001868:	2a08      	cmp	r2, #8
 800186a:	f200 80ad 	bhi.w	80019c8 <UART_SetConfig+0x1b8>
 800186e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001872:	0026      	.short	0x0026
 8001874:	00e9007b 	.word	0x00e9007b
 8001878:	00f500ab 	.word	0x00f500ab
 800187c:	00ab00ab 	.word	0x00ab00ab
 8001880:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001884:	4a7e      	ldr	r2, [pc, #504]	; (8001a80 <UART_SetConfig+0x270>)
 8001886:	4295      	cmp	r5, r2
 8001888:	d107      	bne.n	800189a <UART_SetConfig+0x8a>
 800188a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800188e:	497d      	ldr	r1, [pc, #500]	; (8001a84 <UART_SetConfig+0x274>)
 8001890:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001894:	f002 020c 	and.w	r2, r2, #12
 8001898:	e7e1      	b.n	800185e <UART_SetConfig+0x4e>
 800189a:	4a7b      	ldr	r2, [pc, #492]	; (8001a88 <UART_SetConfig+0x278>)
 800189c:	4295      	cmp	r5, r2
 800189e:	d12b      	bne.n	80018f8 <UART_SetConfig+0xe8>
 80018a0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 80018a4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80018a8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80018ac:	2a10      	cmp	r2, #16
 80018ae:	f000 80d2 	beq.w	8001a56 <UART_SetConfig+0x246>
 80018b2:	d816      	bhi.n	80018e2 <UART_SetConfig+0xd2>
 80018b4:	b9da      	cbnz	r2, 80018ee <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ba:	f040 809f 	bne.w	80019fc <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018be:	f7ff fb0d 	bl	8000edc <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80018c2:	6861      	ldr	r1, [r4, #4]
 80018c4:	084a      	lsrs	r2, r1, #1
 80018c6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80018d0:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80018d2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80018da:	6821      	ldr	r1, [r4, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60cb      	str	r3, [r1, #12]
 80018e0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018e2:	2a20      	cmp	r2, #32
 80018e4:	f000 80ab 	beq.w	8001a3e <UART_SetConfig+0x22e>
 80018e8:	2a30      	cmp	r2, #48	; 0x30
 80018ea:	f000 80ba 	beq.w	8001a62 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018f2:	d069      	beq.n	80019c8 <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018f8:	4a64      	ldr	r2, [pc, #400]	; (8001a8c <UART_SetConfig+0x27c>)
 80018fa:	4295      	cmp	r5, r2
 80018fc:	d10e      	bne.n	800191c <UART_SetConfig+0x10c>
 80018fe:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8001902:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001906:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800190a:	2a40      	cmp	r2, #64	; 0x40
 800190c:	f000 80a3 	beq.w	8001a56 <UART_SetConfig+0x246>
 8001910:	d9d0      	bls.n	80018b4 <UART_SetConfig+0xa4>
 8001912:	2a80      	cmp	r2, #128	; 0x80
 8001914:	f000 8093 	beq.w	8001a3e <UART_SetConfig+0x22e>
 8001918:	2ac0      	cmp	r2, #192	; 0xc0
 800191a:	e7e6      	b.n	80018ea <UART_SetConfig+0xda>
 800191c:	4a5c      	ldr	r2, [pc, #368]	; (8001a90 <UART_SetConfig+0x280>)
 800191e:	4295      	cmp	r5, r2
 8001920:	d110      	bne.n	8001944 <UART_SetConfig+0x134>
 8001922:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001926:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800192a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800192e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001932:	f000 8090 	beq.w	8001a56 <UART_SetConfig+0x246>
 8001936:	d9bd      	bls.n	80018b4 <UART_SetConfig+0xa4>
 8001938:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800193c:	d07f      	beq.n	8001a3e <UART_SetConfig+0x22e>
 800193e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001942:	e7d2      	b.n	80018ea <UART_SetConfig+0xda>
 8001944:	4a53      	ldr	r2, [pc, #332]	; (8001a94 <UART_SetConfig+0x284>)
 8001946:	4295      	cmp	r5, r2
 8001948:	d117      	bne.n	800197a <UART_SetConfig+0x16a>
 800194a:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 800194e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001952:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001956:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800195a:	d07c      	beq.n	8001a56 <UART_SetConfig+0x246>
 800195c:	d807      	bhi.n	800196e <UART_SetConfig+0x15e>
 800195e:	2a00      	cmp	r2, #0
 8001960:	d1c5      	bne.n	80018ee <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001966:	d154      	bne.n	8001a12 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001968:	f7ff fac8 	bl	8000efc <HAL_RCC_GetPCLK2Freq>
 800196c:	e7a9      	b.n	80018c2 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800196e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001972:	d064      	beq.n	8001a3e <UART_SetConfig+0x22e>
 8001974:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001978:	e7b7      	b.n	80018ea <UART_SetConfig+0xda>
 800197a:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <UART_SetConfig+0x288>)
 800197c:	4295      	cmp	r5, r2
 800197e:	d10f      	bne.n	80019a0 <UART_SetConfig+0x190>
 8001980:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001984:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001988:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800198c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001990:	d061      	beq.n	8001a56 <UART_SetConfig+0x246>
 8001992:	d98f      	bls.n	80018b4 <UART_SetConfig+0xa4>
 8001994:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001998:	d051      	beq.n	8001a3e <UART_SetConfig+0x22e>
 800199a:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800199e:	e7a4      	b.n	80018ea <UART_SetConfig+0xda>
 80019a0:	4a3e      	ldr	r2, [pc, #248]	; (8001a9c <UART_SetConfig+0x28c>)
 80019a2:	4295      	cmp	r5, r2
 80019a4:	d1a3      	bne.n	80018ee <UART_SetConfig+0xde>
 80019a6:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80019aa:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80019ae:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80019b2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80019b6:	d04e      	beq.n	8001a56 <UART_SetConfig+0x246>
 80019b8:	f67f af7c 	bls.w	80018b4 <UART_SetConfig+0xa4>
 80019bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019c0:	d03d      	beq.n	8001a3e <UART_SetConfig+0x22e>
 80019c2:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80019c6:	e790      	b.n	80018ea <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e781      	b.n	80018d2 <UART_SetConfig+0xc2>
    switch (clocksource)
 80019ce:	2a08      	cmp	r2, #8
 80019d0:	d890      	bhi.n	80018f4 <UART_SetConfig+0xe4>
 80019d2:	a301      	add	r3, pc, #4	; (adr r3, 80019d8 <UART_SetConfig+0x1c8>)
 80019d4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80019d8:	080019fd 	.word	0x080019fd
 80019dc:	08001a13 	.word	0x08001a13
 80019e0:	08001a19 	.word	0x08001a19
 80019e4:	080018f5 	.word	0x080018f5
 80019e8:	08001a2f 	.word	0x08001a2f
 80019ec:	080018f5 	.word	0x080018f5
 80019f0:	080018f5 	.word	0x080018f5
 80019f4:	080018f5 	.word	0x080018f5
 80019f8:	08001a35 	.word	0x08001a35
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019fc:	f7ff fa6e 	bl	8000edc <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a00:	6863      	ldr	r3, [r4, #4]
 8001a02:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001a06:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a0a:	b280      	uxth	r0, r0
 8001a0c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a0e:	2000      	movs	r0, #0
      break;
 8001a10:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a12:	f7ff fa73 	bl	8000efc <HAL_RCC_GetPCLK2Freq>
 8001a16:	e7f3      	b.n	8001a00 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001a18:	6862      	ldr	r2, [r4, #4]
 8001a1a:	0853      	lsrs	r3, r2, #1
 8001a1c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001a20:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	60eb      	str	r3, [r5, #12]
 8001a2c:	e7ef      	b.n	8001a0e <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a2e:	f7ff f983 	bl	8000d38 <HAL_RCC_GetSysClockFreq>
 8001a32:	e7e5      	b.n	8001a00 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001a34:	6862      	ldr	r2, [r4, #4]
 8001a36:	0853      	lsrs	r3, r2, #1
 8001a38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a3c:	e7f2      	b.n	8001a24 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a42:	d1e9      	bne.n	8001a18 <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a44:	6860      	ldr	r0, [r4, #4]
 8001a46:	0843      	lsrs	r3, r0, #1
 8001a48:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001a4c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a50:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a54:	e73b      	b.n	80018ce <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a5a:	d1e8      	bne.n	8001a2e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a5c:	f7ff f96c 	bl	8000d38 <HAL_RCC_GetSysClockFreq>
 8001a60:	e72f      	b.n	80018c2 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a66:	d1e5      	bne.n	8001a34 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a68:	6860      	ldr	r0, [r4, #4]
 8001a6a:	0843      	lsrs	r3, r0, #1
 8001a6c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001a70:	e7ee      	b.n	8001a50 <UART_SetConfig+0x240>
 8001a72:	bf00      	nop
 8001a74:	efff69f3 	.word	0xefff69f3
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	08002fd4 	.word	0x08002fd4
 8001a80:	40004400 	.word	0x40004400
 8001a84:	08002fd8 	.word	0x08002fd8
 8001a88:	40004800 	.word	0x40004800
 8001a8c:	40004c00 	.word	0x40004c00
 8001a90:	40005000 	.word	0x40005000
 8001a94:	40011400 	.word	0x40011400
 8001a98:	40007800 	.word	0x40007800
 8001a9c:	40007c00 	.word	0x40007c00

08001aa0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001aa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001aa2:	07da      	lsls	r2, r3, #31
{
 8001aa4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001aa6:	d506      	bpl.n	8001ab6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001aa8:	6801      	ldr	r1, [r0, #0]
 8001aaa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001aac:	684a      	ldr	r2, [r1, #4]
 8001aae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ab2:	4322      	orrs	r2, r4
 8001ab4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ab6:	079c      	lsls	r4, r3, #30
 8001ab8:	d506      	bpl.n	8001ac8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001aba:	6801      	ldr	r1, [r0, #0]
 8001abc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001abe:	684a      	ldr	r2, [r1, #4]
 8001ac0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac4:	4322      	orrs	r2, r4
 8001ac6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ac8:	0759      	lsls	r1, r3, #29
 8001aca:	d506      	bpl.n	8001ada <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001acc:	6801      	ldr	r1, [r0, #0]
 8001ace:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ad0:	684a      	ldr	r2, [r1, #4]
 8001ad2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad6:	4322      	orrs	r2, r4
 8001ad8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ada:	071a      	lsls	r2, r3, #28
 8001adc:	d506      	bpl.n	8001aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ade:	6801      	ldr	r1, [r0, #0]
 8001ae0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001ae2:	684a      	ldr	r2, [r1, #4]
 8001ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae8:	4322      	orrs	r2, r4
 8001aea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001aec:	06dc      	lsls	r4, r3, #27
 8001aee:	d506      	bpl.n	8001afe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001af0:	6801      	ldr	r1, [r0, #0]
 8001af2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001af4:	688a      	ldr	r2, [r1, #8]
 8001af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001afa:	4322      	orrs	r2, r4
 8001afc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001afe:	0699      	lsls	r1, r3, #26
 8001b00:	d506      	bpl.n	8001b10 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001b02:	6801      	ldr	r1, [r0, #0]
 8001b04:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001b06:	688a      	ldr	r2, [r1, #8]
 8001b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b0c:	4322      	orrs	r2, r4
 8001b0e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001b10:	065a      	lsls	r2, r3, #25
 8001b12:	d510      	bpl.n	8001b36 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b14:	6801      	ldr	r1, [r0, #0]
 8001b16:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001b18:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b1a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001b1e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001b22:	ea42 0204 	orr.w	r2, r2, r4
 8001b26:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001b28:	d105      	bne.n	8001b36 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001b2a:	684a      	ldr	r2, [r1, #4]
 8001b2c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001b2e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b32:	4322      	orrs	r2, r4
 8001b34:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	d506      	bpl.n	8001b48 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001b3a:	6802      	ldr	r2, [r0, #0]
 8001b3c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001b3e:	6853      	ldr	r3, [r2, #4]
 8001b40:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6053      	str	r3, [r2, #4]
 8001b48:	bd10      	pop	{r4, pc}

08001b4a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4c:	2500      	movs	r5, #0
{
 8001b4e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b50:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001b52:	f7fe fd89 	bl	8000668 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b56:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001b58:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	0712      	lsls	r2, r2, #28
 8001b5e:	d409      	bmi.n	8001b74 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001b60:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001b62:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001b64:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001b68:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8001b6c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8001b70:	b003      	add	sp, #12
 8001b72:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b74:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001b78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	462a      	mov	r2, r5
 8001b82:	f7ff fcca 	bl	800151a <UART_WaitOnFlagUntilTimeout>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d0ea      	beq.n	8001b60 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	e7f0      	b.n	8001b70 <UART_CheckIdleState+0x26>

08001b8e <HAL_UART_Init>:
{
 8001b8e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001b90:	4604      	mov	r4, r0
 8001b92:	b360      	cbz	r0, 8001bee <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b94:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001b98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b9c:	b91b      	cbnz	r3, 8001ba6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b9e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001ba2:	f000 fa3b 	bl	800201c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ba6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ba8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001baa:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8001bac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001bb0:	6813      	ldr	r3, [r2, #0]
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bb8:	f7ff fe2a 	bl	8001810 <UART_SetConfig>
 8001bbc:	2801      	cmp	r0, #1
 8001bbe:	d016      	beq.n	8001bee <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bc2:	b113      	cbz	r3, 8001bca <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff ff6b 	bl	8001aa0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bca:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001bcc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bdc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
}
 8001be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001be8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001bea:	f7ff bfae 	b.w	8001b4a <UART_CheckIdleState>
}
 8001bee:	2001      	movs	r0, #1
 8001bf0:	bd10      	pop	{r4, pc}
	...

08001bf4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <MX_GPIO_Init+0x180>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bf6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bfc:	f042 0204 	orr.w	r2, r2, #4
{
 8001c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
{
 8001c06:	b08d      	sub	sp, #52	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c0c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8001d80 <MX_GPIO_Init+0x18c>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c10:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c14:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c18:	4f57      	ldr	r7, [pc, #348]	; (8001d78 <MX_GPIO_Init+0x184>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c1a:	4650      	mov	r0, sl
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8001d84 <MX_GPIO_Init+0x190>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c20:	9201      	str	r2, [sp, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c24:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2503      	movs	r5, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2a:	f04f 080b 	mov.w	r8, #11
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
 8001c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c36:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001c3a:	9202      	str	r2, [sp, #8]
 8001c3c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
 8001c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c48:	f002 0201 	and.w	r2, r2, #1
 8001c4c:	9203      	str	r2, [sp, #12]
 8001c4e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c52:	f042 0202 	orr.w	r2, r2, #2
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
 8001c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5a:	f002 0202 	and.w	r2, r2, #2
 8001c5e:	9204      	str	r2, [sp, #16]
 8001c60:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c64:	f042 0208 	orr.w	r2, r2, #8
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
 8001c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6c:	f002 0208 	and.w	r2, r2, #8
 8001c70:	9205      	str	r2, [sp, #20]
 8001c72:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	9306      	str	r3, [sp, #24]
 8001c86:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c88:	f7fe fe80 	bl	800098c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4638      	mov	r0, r7
 8001c90:	2140      	movs	r1, #64	; 0x40
 8001c92:	f7fe fe7b 	bl	800098c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <MX_GPIO_Init+0x188>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c98:	a907      	add	r1, sp, #28
 8001c9a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c9c:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f7fe fd88 	bl	80007b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ca8:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001caa:	a907      	add	r1, sp, #28
 8001cac:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cb2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cba:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	f7fe fd7b 	bl	80007b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cc2:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	a907      	add	r1, sp, #28
 8001cc6:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f7fe fd70 	bl	80007b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	a907      	add	r1, sp, #28
 8001cda:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001cdc:	f8cd b01c 	str.w	fp, [sp, #28]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	f04f 0b01 	mov.w	fp, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cea:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f7fe fd63 	bl	80007b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001cf2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	a907      	add	r1, sp, #28
 8001cf8:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001cfe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	f7fe fd58 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d08:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	a907      	add	r1, sp, #28
 8001d0c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d12:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f7fe fd4e 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d1c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	a907      	add	r1, sp, #28
 8001d20:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d24:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f7fe fd46 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	a907      	add	r1, sp, #28
 8001d32:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d36:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d38:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d3c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f7fe fd3a 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d44:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d48:	a907      	add	r1, sp, #28
 8001d4a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d4e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f7fe fd31 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d5a:	a907      	add	r1, sp, #28
 8001d5c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d60:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d66:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d6a:	f7fe fd25 	bl	80007b8 <HAL_GPIO_Init>

}
 8001d6e:	b00d      	add	sp, #52	; 0x34
 8001d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	10110000 	.word	0x10110000
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40020800 	.word	0x40020800

08001d88 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <SystemClock_Config+0xb8>)
 8001d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8001d90:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001d94:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d98:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d9a:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9c:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <SystemClock_Config+0xbc>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db2:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001db8:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dba:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc0:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dc2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001dc6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001dca:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dd0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001dd2:	23d8      	movs	r3, #216	; 0xd8
 8001dd4:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd6:	f7fe fe1b 	bl	8000a10 <HAL_RCC_OscConfig>
 8001dda:	b100      	cbz	r0, 8001dde <SystemClock_Config+0x56>
 8001ddc:	e7fe      	b.n	8001ddc <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001dde:	f7fe fddf 	bl	80009a0 <HAL_PWREx_EnableOverDrive>
 8001de2:	b100      	cbz	r0, 8001de6 <SystemClock_Config+0x5e>
 8001de4:	e7fe      	b.n	8001de4 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001dea:	2107      	movs	r1, #7
 8001dec:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dee:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfc:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001dfe:	f7fe ffc9 	bl	8000d94 <HAL_RCC_ClockConfig>
 8001e02:	b100      	cbz	r0, 8001e06 <SystemClock_Config+0x7e>
 8001e04:	e7fe      	b.n	8001e04 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e06:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e0a:	9027      	str	r0, [sp, #156]	; 0x9c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e0e:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e10:	f7ff f884 	bl	8000f1c <HAL_RCCEx_PeriphCLKConfig>
 8001e14:	4604      	mov	r4, r0
 8001e16:	b100      	cbz	r0, 8001e1a <SystemClock_Config+0x92>
 8001e18:	e7fe      	b.n	8001e18 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e1a:	f7ff f859 	bl	8000ed0 <HAL_RCC_GetHCLKFreq>
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e26:	f7fe fc8d 	bl	8000744 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	f7fe fca0 	bl	8000770 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e30:	4622      	mov	r2, r4
 8001e32:	4621      	mov	r1, r4
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e38:	f7fe fc40 	bl	80006bc <HAL_NVIC_SetPriority>
}
 8001e3c:	b039      	add	sp, #228	; 0xe4
 8001e3e:	bd30      	pop	{r4, r5, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000

08001e48 <main>:
{
 8001e48:	b508      	push	{r3, lr}
		++count;
 8001e4a:	4c0f      	ldr	r4, [pc, #60]	; (8001e88 <main+0x40>)
  HAL_Init();
 8001e4c:	f7fe fbf4 	bl	8000638 <HAL_Init>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e50:	4e0e      	ldr	r6, [pc, #56]	; (8001e8c <main+0x44>)
  SystemClock_Config();
 8001e52:	f7ff ff99 	bl	8001d88 <SystemClock_Config>
		printf("Hello, %3d\r\n", count);
 8001e56:	4d0e      	ldr	r5, [pc, #56]	; (8001e90 <main+0x48>)
  MX_GPIO_Init();
 8001e58:	f7ff fecc 	bl	8001bf4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001e5c:	f000 f8bc 	bl	8001fd8 <MX_USART3_UART_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer3, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	490c      	ldr	r1, [pc, #48]	; (8001e94 <main+0x4c>)
 8001e64:	480c      	ldr	r0, [pc, #48]	; (8001e98 <main+0x50>)
 8001e66:	f7ff fb14 	bl	8001492 <HAL_UART_Receive_IT>
		++count;
 8001e6a:	7823      	ldrb	r3, [r4, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	2180      	movs	r1, #128	; 0x80
		++count;
 8001e70:	3301      	adds	r3, #1
 8001e72:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001e74:	f7fe fd8f 	bl	8000996 <HAL_GPIO_TogglePin>
		printf("Hello, %3d\r\n", count);
 8001e78:	7821      	ldrb	r1, [r4, #0]
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f000 f968 	bl	8002150 <iprintf>
		HAL_Delay(100);
 8001e80:	2064      	movs	r0, #100	; 0x64
 8001e82:	f7fe fbf7 	bl	8000674 <HAL_Delay>
 8001e86:	e7f0      	b.n	8001e6a <main+0x22>
 8001e88:	2000008c 	.word	0x2000008c
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	08002fe5 	.word	0x08002fe5
 8001e94:	200000a0 	.word	0x200000a0
 8001e98:	200000a4 	.word	0x200000a4

08001e9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if(huart == &huart3) {
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_UART_RxCpltCallback+0x2c>)
 8001e9e:	4298      	cmp	r0, r3
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	4604      	mov	r4, r0
	if(huart == &huart3) {
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_UART_RxCpltCallback+0x28>
		__HAL_UART_CLEAR_PEFLAG(&huart3);
 8001ea6:	2501      	movs	r5, #1
 8001ea8:	6803      	ldr	r3, [r0, #0]
		HAL_UART_Receive_IT(&huart3, aRxBuffer3, 1);
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <HAL_UART_RxCpltCallback+0x30>)
		__HAL_UART_CLEAR_PEFLAG(&huart3);
 8001eac:	621d      	str	r5, [r3, #32]
		HAL_UART_Receive_IT(&huart3, aRxBuffer3, 1);
 8001eae:	462a      	mov	r2, r5
 8001eb0:	f7ff faef 	bl	8001492 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart3, aRxBuffer3, 1, 10);	//Echo
 8001eb4:	462a      	mov	r2, r5
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	230a      	movs	r3, #10
 8001eba:	4904      	ldr	r1, [pc, #16]	; (8001ecc <HAL_UART_RxCpltCallback+0x30>)
	}
}
 8001ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&huart3, aRxBuffer3, 1, 10);	//Echo
 8001ec0:	f7ff bb5c 	b.w	800157c <HAL_UART_Transmit>
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200000a4 	.word	0x200000a4
 8001ecc:	200000a0 	.word	0x200000a0

08001ed0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001ed0:	e7fe      	b.n	8001ed0 <_Error_Handler>
	...

08001ed4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_MspInit+0x88>)
{
 8001ed6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eda:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001efe:	f7fe fbcb 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f06f 000b 	mvn.w	r0, #11
 8001f08:	4611      	mov	r1, r2
 8001f0a:	f7fe fbd7 	bl	80006bc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f06f 000a 	mvn.w	r0, #10
 8001f14:	4611      	mov	r1, r2
 8001f16:	f7fe fbd1 	bl	80006bc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f06f 0009 	mvn.w	r0, #9
 8001f20:	4611      	mov	r1, r2
 8001f22:	f7fe fbcb 	bl	80006bc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f06f 0004 	mvn.w	r0, #4
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	f7fe fbc5 	bl	80006bc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f06f 0003 	mvn.w	r0, #3
 8001f38:	4611      	mov	r1, r2
 8001f3a:	f7fe fbbf 	bl	80006bc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f06f 0001 	mvn.w	r0, #1
 8001f44:	4611      	mov	r1, r2
 8001f46:	f7fe fbb9 	bl	80006bc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f50:	4611      	mov	r1, r2
 8001f52:	f7fe fbb3 	bl	80006bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	b003      	add	sp, #12
 8001f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f5c:	40023800 	.word	0x40023800

08001f60 <NMI_Handler>:
 8001f60:	4770      	bx	lr

08001f62 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler>

08001f64 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler>

08001f66 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler>

08001f68 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler>

08001f6a <SVC_Handler>:
 8001f6a:	4770      	bx	lr

08001f6c <DebugMon_Handler>:
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001f6e:	4770      	bx	lr

08001f70 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001f70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f72:	f7fe fb6d 	bl	8000650 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001f7a:	f7fe bc06 	b.w	800078a <HAL_SYSTICK_IRQHandler>
	...

08001f80 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f80:	4801      	ldr	r0, [pc, #4]	; (8001f88 <USART3_IRQHandler+0x8>)
 8001f82:	f7ff bb8d 	b.w	80016a0 <HAL_UART_IRQHandler>
 8001f86:	bf00      	nop
 8001f88:	200000a4 	.word	0x200000a4

08001f8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	490f      	ldr	r1, [pc, #60]	; (8001fcc <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f8e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f90:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <SystemInit+0x44>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001fa6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <SystemInit+0x48>)
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fc0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fc6:	608b      	str	r3, [r1, #8]
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	24003010 	.word	0x24003010

08001fd8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fd8:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8001fda:	480d      	ldr	r0, [pc, #52]	; (8002010 <MX_USART3_UART_Init+0x38>)
  huart3.Init.BaudRate = 115200;
 8001fdc:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe2:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8001fe4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe8:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fea:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fec:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fee:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ff0:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff6:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ffa:	f7ff fdc8 	bl	8001b8e <HAL_UART_Init>
 8001ffe:	b128      	cbz	r0, 800200c <MX_USART3_UART_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002000:	2144      	movs	r1, #68	; 0x44
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_USART3_UART_Init+0x40>)
  }

}
 8002004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002008:	f7ff bf62 	b.w	8001ed0 <_Error_Handler>
 800200c:	bd08      	pop	{r3, pc}
 800200e:	bf00      	nop
 8002010:	200000a4 	.word	0x200000a4
 8002014:	40004800 	.word	0x40004800
 8002018:	0800300a 	.word	0x0800300a

0800201c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 800201c:	6802      	ldr	r2, [r0, #0]
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_UART_MspInit+0x54>)
 8002020:	429a      	cmp	r2, r3
{
 8002022:	b510      	push	{r4, lr}
 8002024:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART3)
 8002026:	d121      	bne.n	800206c <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002028:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202e:	a901      	add	r1, sp, #4
 8002030:	4810      	ldr	r0, [pc, #64]	; (8002074 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002034:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART3_CLK_ENABLE();
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002046:	f44f 7340 	mov.w	r3, #768	; 0x300
 800204a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002054:	2307      	movs	r3, #7
 8002056:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002058:	f7fe fbae 	bl	80007b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800205c:	2027      	movs	r0, #39	; 0x27
 800205e:	4622      	mov	r2, r4
 8002060:	4621      	mov	r1, r4
 8002062:	f7fe fb2b 	bl	80006bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002066:	2027      	movs	r0, #39	; 0x27
 8002068:	f7fe fb60 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800206c:	b006      	add	sp, #24
 800206e:	bd10      	pop	{r4, pc}
 8002070:	40004800 	.word	0x40004800
 8002074:	40020c00 	.word	0x40020c00

08002078 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002078:	b507      	push	{r0, r1, r2, lr}
 800207a:	a902      	add	r1, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800207c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002080:	2201      	movs	r2, #1
{
 8002082:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <__io_putchar+0x1c>)
 8002088:	f7ff fa78 	bl	800157c <HAL_UART_Transmit>

  return ch;
}
 800208c:	9801      	ldr	r0, [sp, #4]
 800208e:	b003      	add	sp, #12
 8002090:	f85d fb04 	ldr.w	pc, [sp], #4
 8002094:	200000a4 	.word	0x200000a4

08002098 <_write>:

int _write(int file, char *ptr, int len)
{
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	460e      	mov	r6, r1
 800209c:	4615      	mov	r5, r2
      int DataIdx;
      for (DataIdx = 0; DataIdx < len;DataIdx++)
 800209e:	460c      	mov	r4, r1
 80020a0:	1ba3      	subs	r3, r4, r6
 80020a2:	429d      	cmp	r5, r3
 80020a4:	dc01      	bgt.n	80020aa <_write+0x12>
      {
           __io_putchar(*ptr++);
      }
      return len;
}
 80020a6:	4628      	mov	r0, r5
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
           __io_putchar(*ptr++);
 80020aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80020ae:	f7ff ffe3 	bl	8002078 <__io_putchar>
 80020b2:	e7f5      	b.n	80020a0 <_write+0x8>

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ba:	e003      	b.n	80020c4 <LoopCopyDataInit>

080020bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020c2:	3104      	adds	r1, #4

080020c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020c4:	480b      	ldr	r0, [pc, #44]	; (80020f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020cc:	d3f6      	bcc.n	80020bc <CopyDataInit>
  ldr  r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020d0:	e002      	b.n	80020d8 <LoopFillZerobss>

080020d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020d4:	f842 3b04 	str.w	r3, [r2], #4

080020d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020dc:	d3f9      	bcc.n	80020d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020de:	f7ff ff55 	bl	8001f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f000 f811 	bl	8002108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff feaf 	bl	8001e48 <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020ec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80020f0:	080030c4 	.word	0x080030c4
  ldr  r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020f8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80020fc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002100:	20000118 	.word	0x20000118

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <__libc_init_array>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4e0d      	ldr	r6, [pc, #52]	; (8002140 <__libc_init_array+0x38>)
 800210c:	4c0d      	ldr	r4, [pc, #52]	; (8002144 <__libc_init_array+0x3c>)
 800210e:	1ba4      	subs	r4, r4, r6
 8002110:	10a4      	asrs	r4, r4, #2
 8002112:	2500      	movs	r5, #0
 8002114:	42a5      	cmp	r5, r4
 8002116:	d109      	bne.n	800212c <__libc_init_array+0x24>
 8002118:	4e0b      	ldr	r6, [pc, #44]	; (8002148 <__libc_init_array+0x40>)
 800211a:	4c0c      	ldr	r4, [pc, #48]	; (800214c <__libc_init_array+0x44>)
 800211c:	f000 ff4e 	bl	8002fbc <_init>
 8002120:	1ba4      	subs	r4, r4, r6
 8002122:	10a4      	asrs	r4, r4, #2
 8002124:	2500      	movs	r5, #0
 8002126:	42a5      	cmp	r5, r4
 8002128:	d105      	bne.n	8002136 <__libc_init_array+0x2e>
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002130:	4798      	blx	r3
 8002132:	3501      	adds	r5, #1
 8002134:	e7ee      	b.n	8002114 <__libc_init_array+0xc>
 8002136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800213a:	4798      	blx	r3
 800213c:	3501      	adds	r5, #1
 800213e:	e7f2      	b.n	8002126 <__libc_init_array+0x1e>
 8002140:	080030bc 	.word	0x080030bc
 8002144:	080030bc 	.word	0x080030bc
 8002148:	080030bc 	.word	0x080030bc
 800214c:	080030c0 	.word	0x080030c0

08002150 <iprintf>:
 8002150:	b40f      	push	{r0, r1, r2, r3}
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <iprintf+0x2c>)
 8002154:	b513      	push	{r0, r1, r4, lr}
 8002156:	681c      	ldr	r4, [r3, #0]
 8002158:	b124      	cbz	r4, 8002164 <iprintf+0x14>
 800215a:	69a3      	ldr	r3, [r4, #24]
 800215c:	b913      	cbnz	r3, 8002164 <iprintf+0x14>
 800215e:	4620      	mov	r0, r4
 8002160:	f000 f84e 	bl	8002200 <__sinit>
 8002164:	ab05      	add	r3, sp, #20
 8002166:	9a04      	ldr	r2, [sp, #16]
 8002168:	68a1      	ldr	r1, [r4, #8]
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	4620      	mov	r0, r4
 800216e:	f000 f961 	bl	8002434 <_vfiprintf_r>
 8002172:	b002      	add	sp, #8
 8002174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002178:	b004      	add	sp, #16
 800217a:	4770      	bx	lr
 800217c:	2000000c 	.word	0x2000000c

08002180 <_cleanup_r>:
 8002180:	4901      	ldr	r1, [pc, #4]	; (8002188 <_cleanup_r+0x8>)
 8002182:	f000 b8a9 	b.w	80022d8 <_fwalk_reent>
 8002186:	bf00      	nop
 8002188:	08002d09 	.word	0x08002d09

0800218c <std.isra.0>:
 800218c:	2300      	movs	r3, #0
 800218e:	b510      	push	{r4, lr}
 8002190:	4604      	mov	r4, r0
 8002192:	6003      	str	r3, [r0, #0]
 8002194:	6043      	str	r3, [r0, #4]
 8002196:	6083      	str	r3, [r0, #8]
 8002198:	8181      	strh	r1, [r0, #12]
 800219a:	6643      	str	r3, [r0, #100]	; 0x64
 800219c:	81c2      	strh	r2, [r0, #14]
 800219e:	6103      	str	r3, [r0, #16]
 80021a0:	6143      	str	r3, [r0, #20]
 80021a2:	6183      	str	r3, [r0, #24]
 80021a4:	4619      	mov	r1, r3
 80021a6:	2208      	movs	r2, #8
 80021a8:	305c      	adds	r0, #92	; 0x5c
 80021aa:	f000 f8b3 	bl	8002314 <memset>
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <std.isra.0+0x38>)
 80021b0:	6263      	str	r3, [r4, #36]	; 0x24
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <std.isra.0+0x3c>)
 80021b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <std.isra.0+0x40>)
 80021b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <std.isra.0+0x44>)
 80021bc:	6224      	str	r4, [r4, #32]
 80021be:	6323      	str	r3, [r4, #48]	; 0x30
 80021c0:	bd10      	pop	{r4, pc}
 80021c2:	bf00      	nop
 80021c4:	080029ad 	.word	0x080029ad
 80021c8:	080029cf 	.word	0x080029cf
 80021cc:	08002a07 	.word	0x08002a07
 80021d0:	08002a2b 	.word	0x08002a2b

080021d4 <__sfmoreglue>:
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	1e4a      	subs	r2, r1, #1
 80021d8:	2568      	movs	r5, #104	; 0x68
 80021da:	4355      	muls	r5, r2
 80021dc:	460e      	mov	r6, r1
 80021de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021e2:	f000 f89f 	bl	8002324 <_malloc_r>
 80021e6:	4604      	mov	r4, r0
 80021e8:	b140      	cbz	r0, 80021fc <__sfmoreglue+0x28>
 80021ea:	2100      	movs	r1, #0
 80021ec:	e880 0042 	stmia.w	r0, {r1, r6}
 80021f0:	300c      	adds	r0, #12
 80021f2:	60a0      	str	r0, [r4, #8]
 80021f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021f8:	f000 f88c 	bl	8002314 <memset>
 80021fc:	4620      	mov	r0, r4
 80021fe:	bd70      	pop	{r4, r5, r6, pc}

08002200 <__sinit>:
 8002200:	6983      	ldr	r3, [r0, #24]
 8002202:	b510      	push	{r4, lr}
 8002204:	4604      	mov	r4, r0
 8002206:	bb33      	cbnz	r3, 8002256 <__sinit+0x56>
 8002208:	6483      	str	r3, [r0, #72]	; 0x48
 800220a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800220c:	6503      	str	r3, [r0, #80]	; 0x50
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <__sinit+0x58>)
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <__sinit+0x5c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6282      	str	r2, [r0, #40]	; 0x28
 8002216:	4298      	cmp	r0, r3
 8002218:	bf04      	itt	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	6183      	streq	r3, [r0, #24]
 800221e:	f000 f81f 	bl	8002260 <__sfp>
 8002222:	6060      	str	r0, [r4, #4]
 8002224:	4620      	mov	r0, r4
 8002226:	f000 f81b 	bl	8002260 <__sfp>
 800222a:	60a0      	str	r0, [r4, #8]
 800222c:	4620      	mov	r0, r4
 800222e:	f000 f817 	bl	8002260 <__sfp>
 8002232:	2200      	movs	r2, #0
 8002234:	60e0      	str	r0, [r4, #12]
 8002236:	2104      	movs	r1, #4
 8002238:	6860      	ldr	r0, [r4, #4]
 800223a:	f7ff ffa7 	bl	800218c <std.isra.0>
 800223e:	2201      	movs	r2, #1
 8002240:	2109      	movs	r1, #9
 8002242:	68a0      	ldr	r0, [r4, #8]
 8002244:	f7ff ffa2 	bl	800218c <std.isra.0>
 8002248:	2202      	movs	r2, #2
 800224a:	2112      	movs	r1, #18
 800224c:	68e0      	ldr	r0, [r4, #12]
 800224e:	f7ff ff9d 	bl	800218c <std.isra.0>
 8002252:	2301      	movs	r3, #1
 8002254:	61a3      	str	r3, [r4, #24]
 8002256:	bd10      	pop	{r4, pc}
 8002258:	0800307c 	.word	0x0800307c
 800225c:	08002181 	.word	0x08002181

08002260 <__sfp>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <__sfp+0x74>)
 8002264:	681e      	ldr	r6, [r3, #0]
 8002266:	69b3      	ldr	r3, [r6, #24]
 8002268:	4607      	mov	r7, r0
 800226a:	b913      	cbnz	r3, 8002272 <__sfp+0x12>
 800226c:	4630      	mov	r0, r6
 800226e:	f7ff ffc7 	bl	8002200 <__sinit>
 8002272:	3648      	adds	r6, #72	; 0x48
 8002274:	68b4      	ldr	r4, [r6, #8]
 8002276:	6873      	ldr	r3, [r6, #4]
 8002278:	3b01      	subs	r3, #1
 800227a:	d503      	bpl.n	8002284 <__sfp+0x24>
 800227c:	6833      	ldr	r3, [r6, #0]
 800227e:	b133      	cbz	r3, 800228e <__sfp+0x2e>
 8002280:	6836      	ldr	r6, [r6, #0]
 8002282:	e7f7      	b.n	8002274 <__sfp+0x14>
 8002284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002288:	b16d      	cbz	r5, 80022a6 <__sfp+0x46>
 800228a:	3468      	adds	r4, #104	; 0x68
 800228c:	e7f4      	b.n	8002278 <__sfp+0x18>
 800228e:	2104      	movs	r1, #4
 8002290:	4638      	mov	r0, r7
 8002292:	f7ff ff9f 	bl	80021d4 <__sfmoreglue>
 8002296:	6030      	str	r0, [r6, #0]
 8002298:	2800      	cmp	r0, #0
 800229a:	d1f1      	bne.n	8002280 <__sfp+0x20>
 800229c:	230c      	movs	r3, #12
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4604      	mov	r4, r0
 80022a2:	4620      	mov	r0, r4
 80022a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022aa:	81e3      	strh	r3, [r4, #14]
 80022ac:	2301      	movs	r3, #1
 80022ae:	81a3      	strh	r3, [r4, #12]
 80022b0:	6665      	str	r5, [r4, #100]	; 0x64
 80022b2:	6025      	str	r5, [r4, #0]
 80022b4:	60a5      	str	r5, [r4, #8]
 80022b6:	6065      	str	r5, [r4, #4]
 80022b8:	6125      	str	r5, [r4, #16]
 80022ba:	6165      	str	r5, [r4, #20]
 80022bc:	61a5      	str	r5, [r4, #24]
 80022be:	2208      	movs	r2, #8
 80022c0:	4629      	mov	r1, r5
 80022c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022c6:	f000 f825 	bl	8002314 <memset>
 80022ca:	6365      	str	r5, [r4, #52]	; 0x34
 80022cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80022ce:	64a5      	str	r5, [r4, #72]	; 0x48
 80022d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80022d2:	e7e6      	b.n	80022a2 <__sfp+0x42>
 80022d4:	0800307c 	.word	0x0800307c

080022d8 <_fwalk_reent>:
 80022d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022dc:	4680      	mov	r8, r0
 80022de:	4689      	mov	r9, r1
 80022e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022e4:	2600      	movs	r6, #0
 80022e6:	b914      	cbnz	r4, 80022ee <_fwalk_reent+0x16>
 80022e8:	4630      	mov	r0, r6
 80022ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022ee:	68a5      	ldr	r5, [r4, #8]
 80022f0:	6867      	ldr	r7, [r4, #4]
 80022f2:	3f01      	subs	r7, #1
 80022f4:	d501      	bpl.n	80022fa <_fwalk_reent+0x22>
 80022f6:	6824      	ldr	r4, [r4, #0]
 80022f8:	e7f5      	b.n	80022e6 <_fwalk_reent+0xe>
 80022fa:	89ab      	ldrh	r3, [r5, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d907      	bls.n	8002310 <_fwalk_reent+0x38>
 8002300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002304:	3301      	adds	r3, #1
 8002306:	d003      	beq.n	8002310 <_fwalk_reent+0x38>
 8002308:	4629      	mov	r1, r5
 800230a:	4640      	mov	r0, r8
 800230c:	47c8      	blx	r9
 800230e:	4306      	orrs	r6, r0
 8002310:	3568      	adds	r5, #104	; 0x68
 8002312:	e7ee      	b.n	80022f2 <_fwalk_reent+0x1a>

08002314 <memset>:
 8002314:	4402      	add	r2, r0
 8002316:	4603      	mov	r3, r0
 8002318:	4293      	cmp	r3, r2
 800231a:	d100      	bne.n	800231e <memset+0xa>
 800231c:	4770      	bx	lr
 800231e:	f803 1b01 	strb.w	r1, [r3], #1
 8002322:	e7f9      	b.n	8002318 <memset+0x4>

08002324 <_malloc_r>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	1ccd      	adds	r5, r1, #3
 8002328:	f025 0503 	bic.w	r5, r5, #3
 800232c:	3508      	adds	r5, #8
 800232e:	2d0c      	cmp	r5, #12
 8002330:	bf38      	it	cc
 8002332:	250c      	movcc	r5, #12
 8002334:	2d00      	cmp	r5, #0
 8002336:	4606      	mov	r6, r0
 8002338:	db01      	blt.n	800233e <_malloc_r+0x1a>
 800233a:	42a9      	cmp	r1, r5
 800233c:	d903      	bls.n	8002346 <_malloc_r+0x22>
 800233e:	230c      	movs	r3, #12
 8002340:	6033      	str	r3, [r6, #0]
 8002342:	2000      	movs	r0, #0
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	f000 fd7f 	bl	8002e48 <__malloc_lock>
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <_malloc_r+0xb4>)
 800234c:	6814      	ldr	r4, [r2, #0]
 800234e:	4621      	mov	r1, r4
 8002350:	b991      	cbnz	r1, 8002378 <_malloc_r+0x54>
 8002352:	4c22      	ldr	r4, [pc, #136]	; (80023dc <_malloc_r+0xb8>)
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	b91b      	cbnz	r3, 8002360 <_malloc_r+0x3c>
 8002358:	4630      	mov	r0, r6
 800235a:	f000 fb17 	bl	800298c <_sbrk_r>
 800235e:	6020      	str	r0, [r4, #0]
 8002360:	4629      	mov	r1, r5
 8002362:	4630      	mov	r0, r6
 8002364:	f000 fb12 	bl	800298c <_sbrk_r>
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	d126      	bne.n	80023ba <_malloc_r+0x96>
 800236c:	230c      	movs	r3, #12
 800236e:	6033      	str	r3, [r6, #0]
 8002370:	4630      	mov	r0, r6
 8002372:	f000 fd6a 	bl	8002e4a <__malloc_unlock>
 8002376:	e7e4      	b.n	8002342 <_malloc_r+0x1e>
 8002378:	680b      	ldr	r3, [r1, #0]
 800237a:	1b5b      	subs	r3, r3, r5
 800237c:	d41a      	bmi.n	80023b4 <_malloc_r+0x90>
 800237e:	2b0b      	cmp	r3, #11
 8002380:	d90f      	bls.n	80023a2 <_malloc_r+0x7e>
 8002382:	600b      	str	r3, [r1, #0]
 8002384:	50cd      	str	r5, [r1, r3]
 8002386:	18cc      	adds	r4, r1, r3
 8002388:	4630      	mov	r0, r6
 800238a:	f000 fd5e 	bl	8002e4a <__malloc_unlock>
 800238e:	f104 000b 	add.w	r0, r4, #11
 8002392:	1d23      	adds	r3, r4, #4
 8002394:	f020 0007 	bic.w	r0, r0, #7
 8002398:	1ac3      	subs	r3, r0, r3
 800239a:	d01b      	beq.n	80023d4 <_malloc_r+0xb0>
 800239c:	425a      	negs	r2, r3
 800239e:	50e2      	str	r2, [r4, r3]
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
 80023a2:	428c      	cmp	r4, r1
 80023a4:	bf0d      	iteet	eq
 80023a6:	6863      	ldreq	r3, [r4, #4]
 80023a8:	684b      	ldrne	r3, [r1, #4]
 80023aa:	6063      	strne	r3, [r4, #4]
 80023ac:	6013      	streq	r3, [r2, #0]
 80023ae:	bf18      	it	ne
 80023b0:	460c      	movne	r4, r1
 80023b2:	e7e9      	b.n	8002388 <_malloc_r+0x64>
 80023b4:	460c      	mov	r4, r1
 80023b6:	6849      	ldr	r1, [r1, #4]
 80023b8:	e7ca      	b.n	8002350 <_malloc_r+0x2c>
 80023ba:	1cc4      	adds	r4, r0, #3
 80023bc:	f024 0403 	bic.w	r4, r4, #3
 80023c0:	42a0      	cmp	r0, r4
 80023c2:	d005      	beq.n	80023d0 <_malloc_r+0xac>
 80023c4:	1a21      	subs	r1, r4, r0
 80023c6:	4630      	mov	r0, r6
 80023c8:	f000 fae0 	bl	800298c <_sbrk_r>
 80023cc:	3001      	adds	r0, #1
 80023ce:	d0cd      	beq.n	800236c <_malloc_r+0x48>
 80023d0:	6025      	str	r5, [r4, #0]
 80023d2:	e7d9      	b.n	8002388 <_malloc_r+0x64>
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
 80023d6:	bf00      	nop
 80023d8:	20000090 	.word	0x20000090
 80023dc:	20000094 	.word	0x20000094

080023e0 <__sfputc_r>:
 80023e0:	6893      	ldr	r3, [r2, #8]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	b410      	push	{r4}
 80023e8:	6093      	str	r3, [r2, #8]
 80023ea:	da09      	bge.n	8002400 <__sfputc_r+0x20>
 80023ec:	6994      	ldr	r4, [r2, #24]
 80023ee:	42a3      	cmp	r3, r4
 80023f0:	db02      	blt.n	80023f8 <__sfputc_r+0x18>
 80023f2:	b2cb      	uxtb	r3, r1
 80023f4:	2b0a      	cmp	r3, #10
 80023f6:	d103      	bne.n	8002400 <__sfputc_r+0x20>
 80023f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023fc:	f000 bb1a 	b.w	8002a34 <__swbuf_r>
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	1c58      	adds	r0, r3, #1
 8002404:	6010      	str	r0, [r2, #0]
 8002406:	7019      	strb	r1, [r3, #0]
 8002408:	b2c8      	uxtb	r0, r1
 800240a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800240e:	4770      	bx	lr

08002410 <__sfputs_r>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	4606      	mov	r6, r0
 8002414:	460f      	mov	r7, r1
 8002416:	4614      	mov	r4, r2
 8002418:	18d5      	adds	r5, r2, r3
 800241a:	42ac      	cmp	r4, r5
 800241c:	d101      	bne.n	8002422 <__sfputs_r+0x12>
 800241e:	2000      	movs	r0, #0
 8002420:	e007      	b.n	8002432 <__sfputs_r+0x22>
 8002422:	463a      	mov	r2, r7
 8002424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002428:	4630      	mov	r0, r6
 800242a:	f7ff ffd9 	bl	80023e0 <__sfputc_r>
 800242e:	1c43      	adds	r3, r0, #1
 8002430:	d1f3      	bne.n	800241a <__sfputs_r+0xa>
 8002432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002434 <_vfiprintf_r>:
 8002434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002438:	b09d      	sub	sp, #116	; 0x74
 800243a:	460c      	mov	r4, r1
 800243c:	4617      	mov	r7, r2
 800243e:	9303      	str	r3, [sp, #12]
 8002440:	4606      	mov	r6, r0
 8002442:	b118      	cbz	r0, 800244c <_vfiprintf_r+0x18>
 8002444:	6983      	ldr	r3, [r0, #24]
 8002446:	b90b      	cbnz	r3, 800244c <_vfiprintf_r+0x18>
 8002448:	f7ff feda 	bl	8002200 <__sinit>
 800244c:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <_vfiprintf_r+0x20c>)
 800244e:	429c      	cmp	r4, r3
 8002450:	d157      	bne.n	8002502 <_vfiprintf_r+0xce>
 8002452:	6874      	ldr	r4, [r6, #4]
 8002454:	89a3      	ldrh	r3, [r4, #12]
 8002456:	0718      	lsls	r0, r3, #28
 8002458:	d55d      	bpl.n	8002516 <_vfiprintf_r+0xe2>
 800245a:	6923      	ldr	r3, [r4, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05a      	beq.n	8002516 <_vfiprintf_r+0xe2>
 8002460:	2300      	movs	r3, #0
 8002462:	9309      	str	r3, [sp, #36]	; 0x24
 8002464:	2320      	movs	r3, #32
 8002466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800246a:	2330      	movs	r3, #48	; 0x30
 800246c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002470:	f04f 0b01 	mov.w	fp, #1
 8002474:	46b8      	mov	r8, r7
 8002476:	4645      	mov	r5, r8
 8002478:	f815 3b01 	ldrb.w	r3, [r5], #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d155      	bne.n	800252c <_vfiprintf_r+0xf8>
 8002480:	ebb8 0a07 	subs.w	sl, r8, r7
 8002484:	d00b      	beq.n	800249e <_vfiprintf_r+0x6a>
 8002486:	4653      	mov	r3, sl
 8002488:	463a      	mov	r2, r7
 800248a:	4621      	mov	r1, r4
 800248c:	4630      	mov	r0, r6
 800248e:	f7ff ffbf 	bl	8002410 <__sfputs_r>
 8002492:	3001      	adds	r0, #1
 8002494:	f000 80c4 	beq.w	8002620 <_vfiprintf_r+0x1ec>
 8002498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800249a:	4453      	add	r3, sl
 800249c:	9309      	str	r3, [sp, #36]	; 0x24
 800249e:	f898 3000 	ldrb.w	r3, [r8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80bc 	beq.w	8002620 <_vfiprintf_r+0x1ec>
 80024a8:	2300      	movs	r3, #0
 80024aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ae:	9304      	str	r3, [sp, #16]
 80024b0:	9307      	str	r3, [sp, #28]
 80024b2:	9205      	str	r2, [sp, #20]
 80024b4:	9306      	str	r3, [sp, #24]
 80024b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024ba:	931a      	str	r3, [sp, #104]	; 0x68
 80024bc:	2205      	movs	r2, #5
 80024be:	7829      	ldrb	r1, [r5, #0]
 80024c0:	4860      	ldr	r0, [pc, #384]	; (8002644 <_vfiprintf_r+0x210>)
 80024c2:	f7fd febd 	bl	8000240 <memchr>
 80024c6:	f105 0801 	add.w	r8, r5, #1
 80024ca:	9b04      	ldr	r3, [sp, #16]
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d131      	bne.n	8002534 <_vfiprintf_r+0x100>
 80024d0:	06d9      	lsls	r1, r3, #27
 80024d2:	bf44      	itt	mi
 80024d4:	2220      	movmi	r2, #32
 80024d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024da:	071a      	lsls	r2, r3, #28
 80024dc:	bf44      	itt	mi
 80024de:	222b      	movmi	r2, #43	; 0x2b
 80024e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024e4:	782a      	ldrb	r2, [r5, #0]
 80024e6:	2a2a      	cmp	r2, #42	; 0x2a
 80024e8:	d02c      	beq.n	8002544 <_vfiprintf_r+0x110>
 80024ea:	9a07      	ldr	r2, [sp, #28]
 80024ec:	2100      	movs	r1, #0
 80024ee:	200a      	movs	r0, #10
 80024f0:	46a8      	mov	r8, r5
 80024f2:	3501      	adds	r5, #1
 80024f4:	f898 3000 	ldrb.w	r3, [r8]
 80024f8:	3b30      	subs	r3, #48	; 0x30
 80024fa:	2b09      	cmp	r3, #9
 80024fc:	d96d      	bls.n	80025da <_vfiprintf_r+0x1a6>
 80024fe:	b371      	cbz	r1, 800255e <_vfiprintf_r+0x12a>
 8002500:	e026      	b.n	8002550 <_vfiprintf_r+0x11c>
 8002502:	4b51      	ldr	r3, [pc, #324]	; (8002648 <_vfiprintf_r+0x214>)
 8002504:	429c      	cmp	r4, r3
 8002506:	d101      	bne.n	800250c <_vfiprintf_r+0xd8>
 8002508:	68b4      	ldr	r4, [r6, #8]
 800250a:	e7a3      	b.n	8002454 <_vfiprintf_r+0x20>
 800250c:	4b4f      	ldr	r3, [pc, #316]	; (800264c <_vfiprintf_r+0x218>)
 800250e:	429c      	cmp	r4, r3
 8002510:	bf08      	it	eq
 8002512:	68f4      	ldreq	r4, [r6, #12]
 8002514:	e79e      	b.n	8002454 <_vfiprintf_r+0x20>
 8002516:	4621      	mov	r1, r4
 8002518:	4630      	mov	r0, r6
 800251a:	f000 faef 	bl	8002afc <__swsetup_r>
 800251e:	2800      	cmp	r0, #0
 8002520:	d09e      	beq.n	8002460 <_vfiprintf_r+0x2c>
 8002522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002526:	b01d      	add	sp, #116	; 0x74
 8002528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800252c:	2b25      	cmp	r3, #37	; 0x25
 800252e:	d0a7      	beq.n	8002480 <_vfiprintf_r+0x4c>
 8002530:	46a8      	mov	r8, r5
 8002532:	e7a0      	b.n	8002476 <_vfiprintf_r+0x42>
 8002534:	4a43      	ldr	r2, [pc, #268]	; (8002644 <_vfiprintf_r+0x210>)
 8002536:	1a80      	subs	r0, r0, r2
 8002538:	fa0b f000 	lsl.w	r0, fp, r0
 800253c:	4318      	orrs	r0, r3
 800253e:	9004      	str	r0, [sp, #16]
 8002540:	4645      	mov	r5, r8
 8002542:	e7bb      	b.n	80024bc <_vfiprintf_r+0x88>
 8002544:	9a03      	ldr	r2, [sp, #12]
 8002546:	1d11      	adds	r1, r2, #4
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	9103      	str	r1, [sp, #12]
 800254c:	2a00      	cmp	r2, #0
 800254e:	db01      	blt.n	8002554 <_vfiprintf_r+0x120>
 8002550:	9207      	str	r2, [sp, #28]
 8002552:	e004      	b.n	800255e <_vfiprintf_r+0x12a>
 8002554:	4252      	negs	r2, r2
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	9207      	str	r2, [sp, #28]
 800255c:	9304      	str	r3, [sp, #16]
 800255e:	f898 3000 	ldrb.w	r3, [r8]
 8002562:	2b2e      	cmp	r3, #46	; 0x2e
 8002564:	d110      	bne.n	8002588 <_vfiprintf_r+0x154>
 8002566:	f898 3001 	ldrb.w	r3, [r8, #1]
 800256a:	2b2a      	cmp	r3, #42	; 0x2a
 800256c:	f108 0101 	add.w	r1, r8, #1
 8002570:	d137      	bne.n	80025e2 <_vfiprintf_r+0x1ae>
 8002572:	9b03      	ldr	r3, [sp, #12]
 8002574:	1d1a      	adds	r2, r3, #4
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	9203      	str	r2, [sp, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfb8      	it	lt
 800257e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002582:	f108 0802 	add.w	r8, r8, #2
 8002586:	9305      	str	r3, [sp, #20]
 8002588:	4d31      	ldr	r5, [pc, #196]	; (8002650 <_vfiprintf_r+0x21c>)
 800258a:	f898 1000 	ldrb.w	r1, [r8]
 800258e:	2203      	movs	r2, #3
 8002590:	4628      	mov	r0, r5
 8002592:	f7fd fe55 	bl	8000240 <memchr>
 8002596:	b140      	cbz	r0, 80025aa <_vfiprintf_r+0x176>
 8002598:	2340      	movs	r3, #64	; 0x40
 800259a:	1b40      	subs	r0, r0, r5
 800259c:	fa03 f000 	lsl.w	r0, r3, r0
 80025a0:	9b04      	ldr	r3, [sp, #16]
 80025a2:	4303      	orrs	r3, r0
 80025a4:	9304      	str	r3, [sp, #16]
 80025a6:	f108 0801 	add.w	r8, r8, #1
 80025aa:	f898 1000 	ldrb.w	r1, [r8]
 80025ae:	4829      	ldr	r0, [pc, #164]	; (8002654 <_vfiprintf_r+0x220>)
 80025b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025b4:	2206      	movs	r2, #6
 80025b6:	f108 0701 	add.w	r7, r8, #1
 80025ba:	f7fd fe41 	bl	8000240 <memchr>
 80025be:	2800      	cmp	r0, #0
 80025c0:	d034      	beq.n	800262c <_vfiprintf_r+0x1f8>
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <_vfiprintf_r+0x224>)
 80025c4:	bb03      	cbnz	r3, 8002608 <_vfiprintf_r+0x1d4>
 80025c6:	9b03      	ldr	r3, [sp, #12]
 80025c8:	3307      	adds	r3, #7
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	3308      	adds	r3, #8
 80025d0:	9303      	str	r3, [sp, #12]
 80025d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025d4:	444b      	add	r3, r9
 80025d6:	9309      	str	r3, [sp, #36]	; 0x24
 80025d8:	e74c      	b.n	8002474 <_vfiprintf_r+0x40>
 80025da:	fb00 3202 	mla	r2, r0, r2, r3
 80025de:	2101      	movs	r1, #1
 80025e0:	e786      	b.n	80024f0 <_vfiprintf_r+0xbc>
 80025e2:	2300      	movs	r3, #0
 80025e4:	9305      	str	r3, [sp, #20]
 80025e6:	4618      	mov	r0, r3
 80025e8:	250a      	movs	r5, #10
 80025ea:	4688      	mov	r8, r1
 80025ec:	3101      	adds	r1, #1
 80025ee:	f898 2000 	ldrb.w	r2, [r8]
 80025f2:	3a30      	subs	r2, #48	; 0x30
 80025f4:	2a09      	cmp	r2, #9
 80025f6:	d903      	bls.n	8002600 <_vfiprintf_r+0x1cc>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0c5      	beq.n	8002588 <_vfiprintf_r+0x154>
 80025fc:	9005      	str	r0, [sp, #20]
 80025fe:	e7c3      	b.n	8002588 <_vfiprintf_r+0x154>
 8002600:	fb05 2000 	mla	r0, r5, r0, r2
 8002604:	2301      	movs	r3, #1
 8002606:	e7f0      	b.n	80025ea <_vfiprintf_r+0x1b6>
 8002608:	ab03      	add	r3, sp, #12
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4622      	mov	r2, r4
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <_vfiprintf_r+0x228>)
 8002610:	a904      	add	r1, sp, #16
 8002612:	4630      	mov	r0, r6
 8002614:	f3af 8000 	nop.w
 8002618:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800261c:	4681      	mov	r9, r0
 800261e:	d1d8      	bne.n	80025d2 <_vfiprintf_r+0x19e>
 8002620:	89a3      	ldrh	r3, [r4, #12]
 8002622:	065b      	lsls	r3, r3, #25
 8002624:	f53f af7d 	bmi.w	8002522 <_vfiprintf_r+0xee>
 8002628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800262a:	e77c      	b.n	8002526 <_vfiprintf_r+0xf2>
 800262c:	ab03      	add	r3, sp, #12
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4622      	mov	r2, r4
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <_vfiprintf_r+0x228>)
 8002634:	a904      	add	r1, sp, #16
 8002636:	4630      	mov	r0, r6
 8002638:	f000 f888 	bl	800274c <_printf_i>
 800263c:	e7ec      	b.n	8002618 <_vfiprintf_r+0x1e4>
 800263e:	bf00      	nop
 8002640:	0800303c 	.word	0x0800303c
 8002644:	08003080 	.word	0x08003080
 8002648:	0800305c 	.word	0x0800305c
 800264c:	0800301c 	.word	0x0800301c
 8002650:	08003086 	.word	0x08003086
 8002654:	0800308a 	.word	0x0800308a
 8002658:	00000000 	.word	0x00000000
 800265c:	08002411 	.word	0x08002411

08002660 <_printf_common>:
 8002660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002664:	4691      	mov	r9, r2
 8002666:	461f      	mov	r7, r3
 8002668:	688a      	ldr	r2, [r1, #8]
 800266a:	690b      	ldr	r3, [r1, #16]
 800266c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002670:	4293      	cmp	r3, r2
 8002672:	bfb8      	it	lt
 8002674:	4613      	movlt	r3, r2
 8002676:	f8c9 3000 	str.w	r3, [r9]
 800267a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800267e:	4606      	mov	r6, r0
 8002680:	460c      	mov	r4, r1
 8002682:	b112      	cbz	r2, 800268a <_printf_common+0x2a>
 8002684:	3301      	adds	r3, #1
 8002686:	f8c9 3000 	str.w	r3, [r9]
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	0699      	lsls	r1, r3, #26
 800268e:	bf42      	ittt	mi
 8002690:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002694:	3302      	addmi	r3, #2
 8002696:	f8c9 3000 	strmi.w	r3, [r9]
 800269a:	6825      	ldr	r5, [r4, #0]
 800269c:	f015 0506 	ands.w	r5, r5, #6
 80026a0:	d107      	bne.n	80026b2 <_printf_common+0x52>
 80026a2:	f104 0a19 	add.w	sl, r4, #25
 80026a6:	68e3      	ldr	r3, [r4, #12]
 80026a8:	f8d9 2000 	ldr.w	r2, [r9]
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	429d      	cmp	r5, r3
 80026b0:	db29      	blt.n	8002706 <_printf_common+0xa6>
 80026b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80026b6:	6822      	ldr	r2, [r4, #0]
 80026b8:	3300      	adds	r3, #0
 80026ba:	bf18      	it	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	0692      	lsls	r2, r2, #26
 80026c0:	d42e      	bmi.n	8002720 <_printf_common+0xc0>
 80026c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026c6:	4639      	mov	r1, r7
 80026c8:	4630      	mov	r0, r6
 80026ca:	47c0      	blx	r8
 80026cc:	3001      	adds	r0, #1
 80026ce:	d021      	beq.n	8002714 <_printf_common+0xb4>
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	68e5      	ldr	r5, [r4, #12]
 80026d4:	f8d9 2000 	ldr.w	r2, [r9]
 80026d8:	f003 0306 	and.w	r3, r3, #6
 80026dc:	2b04      	cmp	r3, #4
 80026de:	bf08      	it	eq
 80026e0:	1aad      	subeq	r5, r5, r2
 80026e2:	68a3      	ldr	r3, [r4, #8]
 80026e4:	6922      	ldr	r2, [r4, #16]
 80026e6:	bf0c      	ite	eq
 80026e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026ec:	2500      	movne	r5, #0
 80026ee:	4293      	cmp	r3, r2
 80026f0:	bfc4      	itt	gt
 80026f2:	1a9b      	subgt	r3, r3, r2
 80026f4:	18ed      	addgt	r5, r5, r3
 80026f6:	f04f 0900 	mov.w	r9, #0
 80026fa:	341a      	adds	r4, #26
 80026fc:	454d      	cmp	r5, r9
 80026fe:	d11b      	bne.n	8002738 <_printf_common+0xd8>
 8002700:	2000      	movs	r0, #0
 8002702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002706:	2301      	movs	r3, #1
 8002708:	4652      	mov	r2, sl
 800270a:	4639      	mov	r1, r7
 800270c:	4630      	mov	r0, r6
 800270e:	47c0      	blx	r8
 8002710:	3001      	adds	r0, #1
 8002712:	d103      	bne.n	800271c <_printf_common+0xbc>
 8002714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800271c:	3501      	adds	r5, #1
 800271e:	e7c2      	b.n	80026a6 <_printf_common+0x46>
 8002720:	18e1      	adds	r1, r4, r3
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	2030      	movs	r0, #48	; 0x30
 8002726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800272a:	4422      	add	r2, r4
 800272c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002734:	3302      	adds	r3, #2
 8002736:	e7c4      	b.n	80026c2 <_printf_common+0x62>
 8002738:	2301      	movs	r3, #1
 800273a:	4622      	mov	r2, r4
 800273c:	4639      	mov	r1, r7
 800273e:	4630      	mov	r0, r6
 8002740:	47c0      	blx	r8
 8002742:	3001      	adds	r0, #1
 8002744:	d0e6      	beq.n	8002714 <_printf_common+0xb4>
 8002746:	f109 0901 	add.w	r9, r9, #1
 800274a:	e7d7      	b.n	80026fc <_printf_common+0x9c>

0800274c <_printf_i>:
 800274c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002750:	4617      	mov	r7, r2
 8002752:	7e0a      	ldrb	r2, [r1, #24]
 8002754:	b085      	sub	sp, #20
 8002756:	2a6e      	cmp	r2, #110	; 0x6e
 8002758:	4698      	mov	r8, r3
 800275a:	4606      	mov	r6, r0
 800275c:	460c      	mov	r4, r1
 800275e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002760:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002764:	f000 80bc 	beq.w	80028e0 <_printf_i+0x194>
 8002768:	d81a      	bhi.n	80027a0 <_printf_i+0x54>
 800276a:	2a63      	cmp	r2, #99	; 0x63
 800276c:	d02e      	beq.n	80027cc <_printf_i+0x80>
 800276e:	d80a      	bhi.n	8002786 <_printf_i+0x3a>
 8002770:	2a00      	cmp	r2, #0
 8002772:	f000 80c8 	beq.w	8002906 <_printf_i+0x1ba>
 8002776:	2a58      	cmp	r2, #88	; 0x58
 8002778:	f000 808a 	beq.w	8002890 <_printf_i+0x144>
 800277c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002780:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002784:	e02a      	b.n	80027dc <_printf_i+0x90>
 8002786:	2a64      	cmp	r2, #100	; 0x64
 8002788:	d001      	beq.n	800278e <_printf_i+0x42>
 800278a:	2a69      	cmp	r2, #105	; 0x69
 800278c:	d1f6      	bne.n	800277c <_printf_i+0x30>
 800278e:	6821      	ldr	r1, [r4, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002796:	d023      	beq.n	80027e0 <_printf_i+0x94>
 8002798:	1d11      	adds	r1, r2, #4
 800279a:	6019      	str	r1, [r3, #0]
 800279c:	6813      	ldr	r3, [r2, #0]
 800279e:	e027      	b.n	80027f0 <_printf_i+0xa4>
 80027a0:	2a73      	cmp	r2, #115	; 0x73
 80027a2:	f000 80b4 	beq.w	800290e <_printf_i+0x1c2>
 80027a6:	d808      	bhi.n	80027ba <_printf_i+0x6e>
 80027a8:	2a6f      	cmp	r2, #111	; 0x6f
 80027aa:	d02a      	beq.n	8002802 <_printf_i+0xb6>
 80027ac:	2a70      	cmp	r2, #112	; 0x70
 80027ae:	d1e5      	bne.n	800277c <_printf_i+0x30>
 80027b0:	680a      	ldr	r2, [r1, #0]
 80027b2:	f042 0220 	orr.w	r2, r2, #32
 80027b6:	600a      	str	r2, [r1, #0]
 80027b8:	e003      	b.n	80027c2 <_printf_i+0x76>
 80027ba:	2a75      	cmp	r2, #117	; 0x75
 80027bc:	d021      	beq.n	8002802 <_printf_i+0xb6>
 80027be:	2a78      	cmp	r2, #120	; 0x78
 80027c0:	d1dc      	bne.n	800277c <_printf_i+0x30>
 80027c2:	2278      	movs	r2, #120	; 0x78
 80027c4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80027c8:	496e      	ldr	r1, [pc, #440]	; (8002984 <_printf_i+0x238>)
 80027ca:	e064      	b.n	8002896 <_printf_i+0x14a>
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80027d2:	1d11      	adds	r1, r2, #4
 80027d4:	6019      	str	r1, [r3, #0]
 80027d6:	6813      	ldr	r3, [r2, #0]
 80027d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027dc:	2301      	movs	r3, #1
 80027de:	e0a3      	b.n	8002928 <_printf_i+0x1dc>
 80027e0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80027e4:	f102 0104 	add.w	r1, r2, #4
 80027e8:	6019      	str	r1, [r3, #0]
 80027ea:	d0d7      	beq.n	800279c <_printf_i+0x50>
 80027ec:	f9b2 3000 	ldrsh.w	r3, [r2]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da03      	bge.n	80027fc <_printf_i+0xb0>
 80027f4:	222d      	movs	r2, #45	; 0x2d
 80027f6:	425b      	negs	r3, r3
 80027f8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027fc:	4962      	ldr	r1, [pc, #392]	; (8002988 <_printf_i+0x23c>)
 80027fe:	220a      	movs	r2, #10
 8002800:	e017      	b.n	8002832 <_printf_i+0xe6>
 8002802:	6820      	ldr	r0, [r4, #0]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	f010 0f80 	tst.w	r0, #128	; 0x80
 800280a:	d003      	beq.n	8002814 <_printf_i+0xc8>
 800280c:	1d08      	adds	r0, r1, #4
 800280e:	6018      	str	r0, [r3, #0]
 8002810:	680b      	ldr	r3, [r1, #0]
 8002812:	e006      	b.n	8002822 <_printf_i+0xd6>
 8002814:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002818:	f101 0004 	add.w	r0, r1, #4
 800281c:	6018      	str	r0, [r3, #0]
 800281e:	d0f7      	beq.n	8002810 <_printf_i+0xc4>
 8002820:	880b      	ldrh	r3, [r1, #0]
 8002822:	4959      	ldr	r1, [pc, #356]	; (8002988 <_printf_i+0x23c>)
 8002824:	2a6f      	cmp	r2, #111	; 0x6f
 8002826:	bf14      	ite	ne
 8002828:	220a      	movne	r2, #10
 800282a:	2208      	moveq	r2, #8
 800282c:	2000      	movs	r0, #0
 800282e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002832:	6865      	ldr	r5, [r4, #4]
 8002834:	60a5      	str	r5, [r4, #8]
 8002836:	2d00      	cmp	r5, #0
 8002838:	f2c0 809c 	blt.w	8002974 <_printf_i+0x228>
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f020 0004 	bic.w	r0, r0, #4
 8002842:	6020      	str	r0, [r4, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d13f      	bne.n	80028c8 <_printf_i+0x17c>
 8002848:	2d00      	cmp	r5, #0
 800284a:	f040 8095 	bne.w	8002978 <_printf_i+0x22c>
 800284e:	4675      	mov	r5, lr
 8002850:	2a08      	cmp	r2, #8
 8002852:	d10b      	bne.n	800286c <_printf_i+0x120>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	07da      	lsls	r2, r3, #31
 8002858:	d508      	bpl.n	800286c <_printf_i+0x120>
 800285a:	6923      	ldr	r3, [r4, #16]
 800285c:	6862      	ldr	r2, [r4, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	bfde      	ittt	le
 8002862:	2330      	movle	r3, #48	; 0x30
 8002864:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002868:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800286c:	ebae 0305 	sub.w	r3, lr, r5
 8002870:	6123      	str	r3, [r4, #16]
 8002872:	f8cd 8000 	str.w	r8, [sp]
 8002876:	463b      	mov	r3, r7
 8002878:	aa03      	add	r2, sp, #12
 800287a:	4621      	mov	r1, r4
 800287c:	4630      	mov	r0, r6
 800287e:	f7ff feef 	bl	8002660 <_printf_common>
 8002882:	3001      	adds	r0, #1
 8002884:	d155      	bne.n	8002932 <_printf_i+0x1e6>
 8002886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800288a:	b005      	add	sp, #20
 800288c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002890:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002894:	493c      	ldr	r1, [pc, #240]	; (8002988 <_printf_i+0x23c>)
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800289e:	f100 0504 	add.w	r5, r0, #4
 80028a2:	601d      	str	r5, [r3, #0]
 80028a4:	d001      	beq.n	80028aa <_printf_i+0x15e>
 80028a6:	6803      	ldr	r3, [r0, #0]
 80028a8:	e002      	b.n	80028b0 <_printf_i+0x164>
 80028aa:	0655      	lsls	r5, r2, #25
 80028ac:	d5fb      	bpl.n	80028a6 <_printf_i+0x15a>
 80028ae:	8803      	ldrh	r3, [r0, #0]
 80028b0:	07d0      	lsls	r0, r2, #31
 80028b2:	bf44      	itt	mi
 80028b4:	f042 0220 	orrmi.w	r2, r2, #32
 80028b8:	6022      	strmi	r2, [r4, #0]
 80028ba:	b91b      	cbnz	r3, 80028c4 <_printf_i+0x178>
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	f022 0220 	bic.w	r2, r2, #32
 80028c2:	6022      	str	r2, [r4, #0]
 80028c4:	2210      	movs	r2, #16
 80028c6:	e7b1      	b.n	800282c <_printf_i+0xe0>
 80028c8:	4675      	mov	r5, lr
 80028ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80028ce:	fb02 3310 	mls	r3, r2, r0, r3
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80028d8:	4603      	mov	r3, r0
 80028da:	2800      	cmp	r0, #0
 80028dc:	d1f5      	bne.n	80028ca <_printf_i+0x17e>
 80028de:	e7b7      	b.n	8002850 <_printf_i+0x104>
 80028e0:	6808      	ldr	r0, [r1, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	6949      	ldr	r1, [r1, #20]
 80028e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028ea:	d004      	beq.n	80028f6 <_printf_i+0x1aa>
 80028ec:	1d10      	adds	r0, r2, #4
 80028ee:	6018      	str	r0, [r3, #0]
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	6019      	str	r1, [r3, #0]
 80028f4:	e007      	b.n	8002906 <_printf_i+0x1ba>
 80028f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028fa:	f102 0004 	add.w	r0, r2, #4
 80028fe:	6018      	str	r0, [r3, #0]
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	d0f6      	beq.n	80028f2 <_printf_i+0x1a6>
 8002904:	8019      	strh	r1, [r3, #0]
 8002906:	2300      	movs	r3, #0
 8002908:	6123      	str	r3, [r4, #16]
 800290a:	4675      	mov	r5, lr
 800290c:	e7b1      	b.n	8002872 <_printf_i+0x126>
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	1d11      	adds	r1, r2, #4
 8002912:	6019      	str	r1, [r3, #0]
 8002914:	6815      	ldr	r5, [r2, #0]
 8002916:	6862      	ldr	r2, [r4, #4]
 8002918:	2100      	movs	r1, #0
 800291a:	4628      	mov	r0, r5
 800291c:	f7fd fc90 	bl	8000240 <memchr>
 8002920:	b108      	cbz	r0, 8002926 <_printf_i+0x1da>
 8002922:	1b40      	subs	r0, r0, r5
 8002924:	6060      	str	r0, [r4, #4]
 8002926:	6863      	ldr	r3, [r4, #4]
 8002928:	6123      	str	r3, [r4, #16]
 800292a:	2300      	movs	r3, #0
 800292c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002930:	e79f      	b.n	8002872 <_printf_i+0x126>
 8002932:	6923      	ldr	r3, [r4, #16]
 8002934:	462a      	mov	r2, r5
 8002936:	4639      	mov	r1, r7
 8002938:	4630      	mov	r0, r6
 800293a:	47c0      	blx	r8
 800293c:	3001      	adds	r0, #1
 800293e:	d0a2      	beq.n	8002886 <_printf_i+0x13a>
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	079b      	lsls	r3, r3, #30
 8002944:	d507      	bpl.n	8002956 <_printf_i+0x20a>
 8002946:	2500      	movs	r5, #0
 8002948:	f104 0919 	add.w	r9, r4, #25
 800294c:	68e3      	ldr	r3, [r4, #12]
 800294e:	9a03      	ldr	r2, [sp, #12]
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	429d      	cmp	r5, r3
 8002954:	db05      	blt.n	8002962 <_printf_i+0x216>
 8002956:	68e0      	ldr	r0, [r4, #12]
 8002958:	9b03      	ldr	r3, [sp, #12]
 800295a:	4298      	cmp	r0, r3
 800295c:	bfb8      	it	lt
 800295e:	4618      	movlt	r0, r3
 8002960:	e793      	b.n	800288a <_printf_i+0x13e>
 8002962:	2301      	movs	r3, #1
 8002964:	464a      	mov	r2, r9
 8002966:	4639      	mov	r1, r7
 8002968:	4630      	mov	r0, r6
 800296a:	47c0      	blx	r8
 800296c:	3001      	adds	r0, #1
 800296e:	d08a      	beq.n	8002886 <_printf_i+0x13a>
 8002970:	3501      	adds	r5, #1
 8002972:	e7eb      	b.n	800294c <_printf_i+0x200>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1a7      	bne.n	80028c8 <_printf_i+0x17c>
 8002978:	780b      	ldrb	r3, [r1, #0]
 800297a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800297e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002982:	e765      	b.n	8002850 <_printf_i+0x104>
 8002984:	080030a2 	.word	0x080030a2
 8002988:	08003091 	.word	0x08003091

0800298c <_sbrk_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4c06      	ldr	r4, [pc, #24]	; (80029a8 <_sbrk_r+0x1c>)
 8002990:	2300      	movs	r3, #0
 8002992:	4605      	mov	r5, r0
 8002994:	4608      	mov	r0, r1
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	f000 fb02 	bl	8002fa0 <_sbrk>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d102      	bne.n	80029a6 <_sbrk_r+0x1a>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	b103      	cbz	r3, 80029a6 <_sbrk_r+0x1a>
 80029a4:	602b      	str	r3, [r5, #0]
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	20000114 	.word	0x20000114

080029ac <__sread>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	460c      	mov	r4, r1
 80029b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b4:	f000 fa98 	bl	8002ee8 <_read_r>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	bfab      	itete	ge
 80029bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80029be:	89a3      	ldrhlt	r3, [r4, #12]
 80029c0:	181b      	addge	r3, r3, r0
 80029c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029c6:	bfac      	ite	ge
 80029c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80029ca:	81a3      	strhlt	r3, [r4, #12]
 80029cc:	bd10      	pop	{r4, pc}

080029ce <__swrite>:
 80029ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029d2:	461f      	mov	r7, r3
 80029d4:	898b      	ldrh	r3, [r1, #12]
 80029d6:	05db      	lsls	r3, r3, #23
 80029d8:	4605      	mov	r5, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	4616      	mov	r6, r2
 80029de:	d505      	bpl.n	80029ec <__swrite+0x1e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	2200      	movs	r2, #0
 80029e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029e8:	f000 f9b8 	bl	8002d5c <_lseek_r>
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029f6:	81a3      	strh	r3, [r4, #12]
 80029f8:	4632      	mov	r2, r6
 80029fa:	463b      	mov	r3, r7
 80029fc:	4628      	mov	r0, r5
 80029fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a02:	f000 b869 	b.w	8002ad8 <_write_r>

08002a06 <__sseek>:
 8002a06:	b510      	push	{r4, lr}
 8002a08:	460c      	mov	r4, r1
 8002a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a0e:	f000 f9a5 	bl	8002d5c <_lseek_r>
 8002a12:	1c43      	adds	r3, r0, #1
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	bf15      	itete	ne
 8002a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a22:	81a3      	strheq	r3, [r4, #12]
 8002a24:	bf18      	it	ne
 8002a26:	81a3      	strhne	r3, [r4, #12]
 8002a28:	bd10      	pop	{r4, pc}

08002a2a <__sclose>:
 8002a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a2e:	f000 b8d3 	b.w	8002bd8 <_close_r>
	...

08002a34 <__swbuf_r>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	460e      	mov	r6, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	4605      	mov	r5, r0
 8002a3c:	b118      	cbz	r0, 8002a46 <__swbuf_r+0x12>
 8002a3e:	6983      	ldr	r3, [r0, #24]
 8002a40:	b90b      	cbnz	r3, 8002a46 <__swbuf_r+0x12>
 8002a42:	f7ff fbdd 	bl	8002200 <__sinit>
 8002a46:	4b21      	ldr	r3, [pc, #132]	; (8002acc <__swbuf_r+0x98>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d12a      	bne.n	8002aa2 <__swbuf_r+0x6e>
 8002a4c:	686c      	ldr	r4, [r5, #4]
 8002a4e:	69a3      	ldr	r3, [r4, #24]
 8002a50:	60a3      	str	r3, [r4, #8]
 8002a52:	89a3      	ldrh	r3, [r4, #12]
 8002a54:	071a      	lsls	r2, r3, #28
 8002a56:	d52e      	bpl.n	8002ab6 <__swbuf_r+0x82>
 8002a58:	6923      	ldr	r3, [r4, #16]
 8002a5a:	b363      	cbz	r3, 8002ab6 <__swbuf_r+0x82>
 8002a5c:	6923      	ldr	r3, [r4, #16]
 8002a5e:	6820      	ldr	r0, [r4, #0]
 8002a60:	1ac0      	subs	r0, r0, r3
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	b2f6      	uxtb	r6, r6
 8002a66:	4298      	cmp	r0, r3
 8002a68:	4637      	mov	r7, r6
 8002a6a:	db04      	blt.n	8002a76 <__swbuf_r+0x42>
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f000 f94a 	bl	8002d08 <_fflush_r>
 8002a74:	bb28      	cbnz	r0, 8002ac2 <__swbuf_r+0x8e>
 8002a76:	68a3      	ldr	r3, [r4, #8]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	60a3      	str	r3, [r4, #8]
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	6022      	str	r2, [r4, #0]
 8002a82:	701e      	strb	r6, [r3, #0]
 8002a84:	6963      	ldr	r3, [r4, #20]
 8002a86:	3001      	adds	r0, #1
 8002a88:	4298      	cmp	r0, r3
 8002a8a:	d004      	beq.n	8002a96 <__swbuf_r+0x62>
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	07db      	lsls	r3, r3, #31
 8002a90:	d519      	bpl.n	8002ac6 <__swbuf_r+0x92>
 8002a92:	2e0a      	cmp	r6, #10
 8002a94:	d117      	bne.n	8002ac6 <__swbuf_r+0x92>
 8002a96:	4621      	mov	r1, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f000 f935 	bl	8002d08 <_fflush_r>
 8002a9e:	b190      	cbz	r0, 8002ac6 <__swbuf_r+0x92>
 8002aa0:	e00f      	b.n	8002ac2 <__swbuf_r+0x8e>
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <__swbuf_r+0x9c>)
 8002aa4:	429c      	cmp	r4, r3
 8002aa6:	d101      	bne.n	8002aac <__swbuf_r+0x78>
 8002aa8:	68ac      	ldr	r4, [r5, #8]
 8002aaa:	e7d0      	b.n	8002a4e <__swbuf_r+0x1a>
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <__swbuf_r+0xa0>)
 8002aae:	429c      	cmp	r4, r3
 8002ab0:	bf08      	it	eq
 8002ab2:	68ec      	ldreq	r4, [r5, #12]
 8002ab4:	e7cb      	b.n	8002a4e <__swbuf_r+0x1a>
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f000 f81f 	bl	8002afc <__swsetup_r>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d0cc      	beq.n	8002a5c <__swbuf_r+0x28>
 8002ac2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002ac6:	4638      	mov	r0, r7
 8002ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	0800303c 	.word	0x0800303c
 8002ad0:	0800305c 	.word	0x0800305c
 8002ad4:	0800301c 	.word	0x0800301c

08002ad8 <_write_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	4c07      	ldr	r4, [pc, #28]	; (8002af8 <_write_r+0x20>)
 8002adc:	4605      	mov	r5, r0
 8002ade:	4608      	mov	r0, r1
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	6022      	str	r2, [r4, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f7ff fad6 	bl	8002098 <_write>
 8002aec:	1c43      	adds	r3, r0, #1
 8002aee:	d102      	bne.n	8002af6 <_write_r+0x1e>
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	b103      	cbz	r3, 8002af6 <_write_r+0x1e>
 8002af4:	602b      	str	r3, [r5, #0]
 8002af6:	bd38      	pop	{r3, r4, r5, pc}
 8002af8:	20000114 	.word	0x20000114

08002afc <__swsetup_r>:
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <__swsetup_r+0xcc>)
 8002afe:	b570      	push	{r4, r5, r6, lr}
 8002b00:	681d      	ldr	r5, [r3, #0]
 8002b02:	4606      	mov	r6, r0
 8002b04:	460c      	mov	r4, r1
 8002b06:	b125      	cbz	r5, 8002b12 <__swsetup_r+0x16>
 8002b08:	69ab      	ldr	r3, [r5, #24]
 8002b0a:	b913      	cbnz	r3, 8002b12 <__swsetup_r+0x16>
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f7ff fb77 	bl	8002200 <__sinit>
 8002b12:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <__swsetup_r+0xd0>)
 8002b14:	429c      	cmp	r4, r3
 8002b16:	d10f      	bne.n	8002b38 <__swsetup_r+0x3c>
 8002b18:	686c      	ldr	r4, [r5, #4]
 8002b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	0715      	lsls	r5, r2, #28
 8002b22:	d42c      	bmi.n	8002b7e <__swsetup_r+0x82>
 8002b24:	06d0      	lsls	r0, r2, #27
 8002b26:	d411      	bmi.n	8002b4c <__swsetup_r+0x50>
 8002b28:	2209      	movs	r2, #9
 8002b2a:	6032      	str	r2, [r6, #0]
 8002b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b30:	81a3      	strh	r3, [r4, #12]
 8002b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b36:	bd70      	pop	{r4, r5, r6, pc}
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <__swsetup_r+0xd4>)
 8002b3a:	429c      	cmp	r4, r3
 8002b3c:	d101      	bne.n	8002b42 <__swsetup_r+0x46>
 8002b3e:	68ac      	ldr	r4, [r5, #8]
 8002b40:	e7eb      	b.n	8002b1a <__swsetup_r+0x1e>
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <__swsetup_r+0xd8>)
 8002b44:	429c      	cmp	r4, r3
 8002b46:	bf08      	it	eq
 8002b48:	68ec      	ldreq	r4, [r5, #12]
 8002b4a:	e7e6      	b.n	8002b1a <__swsetup_r+0x1e>
 8002b4c:	0751      	lsls	r1, r2, #29
 8002b4e:	d512      	bpl.n	8002b76 <__swsetup_r+0x7a>
 8002b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b52:	b141      	cbz	r1, 8002b66 <__swsetup_r+0x6a>
 8002b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b58:	4299      	cmp	r1, r3
 8002b5a:	d002      	beq.n	8002b62 <__swsetup_r+0x66>
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	f000 f975 	bl	8002e4c <_free_r>
 8002b62:	2300      	movs	r3, #0
 8002b64:	6363      	str	r3, [r4, #52]	; 0x34
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b6c:	81a3      	strh	r3, [r4, #12]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6063      	str	r3, [r4, #4]
 8002b72:	6923      	ldr	r3, [r4, #16]
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	89a3      	ldrh	r3, [r4, #12]
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	81a3      	strh	r3, [r4, #12]
 8002b7e:	6923      	ldr	r3, [r4, #16]
 8002b80:	b94b      	cbnz	r3, 8002b96 <__swsetup_r+0x9a>
 8002b82:	89a3      	ldrh	r3, [r4, #12]
 8002b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d003      	beq.n	8002b96 <__swsetup_r+0x9a>
 8002b8e:	4621      	mov	r1, r4
 8002b90:	4630      	mov	r0, r6
 8002b92:	f000 f919 	bl	8002dc8 <__smakebuf_r>
 8002b96:	89a2      	ldrh	r2, [r4, #12]
 8002b98:	f012 0301 	ands.w	r3, r2, #1
 8002b9c:	d00c      	beq.n	8002bb8 <__swsetup_r+0xbc>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60a3      	str	r3, [r4, #8]
 8002ba2:	6963      	ldr	r3, [r4, #20]
 8002ba4:	425b      	negs	r3, r3
 8002ba6:	61a3      	str	r3, [r4, #24]
 8002ba8:	6923      	ldr	r3, [r4, #16]
 8002baa:	b953      	cbnz	r3, 8002bc2 <__swsetup_r+0xc6>
 8002bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002bb4:	d1ba      	bne.n	8002b2c <__swsetup_r+0x30>
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	0792      	lsls	r2, r2, #30
 8002bba:	bf58      	it	pl
 8002bbc:	6963      	ldrpl	r3, [r4, #20]
 8002bbe:	60a3      	str	r3, [r4, #8]
 8002bc0:	e7f2      	b.n	8002ba8 <__swsetup_r+0xac>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e7f7      	b.n	8002bb6 <__swsetup_r+0xba>
 8002bc6:	bf00      	nop
 8002bc8:	2000000c 	.word	0x2000000c
 8002bcc:	0800303c 	.word	0x0800303c
 8002bd0:	0800305c 	.word	0x0800305c
 8002bd4:	0800301c 	.word	0x0800301c

08002bd8 <_close_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4c06      	ldr	r4, [pc, #24]	; (8002bf4 <_close_r+0x1c>)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	4605      	mov	r5, r0
 8002be0:	4608      	mov	r0, r1
 8002be2:	6023      	str	r3, [r4, #0]
 8002be4:	f000 f9b4 	bl	8002f50 <_close>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_close_r+0x1a>
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_close_r+0x1a>
 8002bf0:	602b      	str	r3, [r5, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	20000114 	.word	0x20000114

08002bf8 <__sflush_r>:
 8002bf8:	898a      	ldrh	r2, [r1, #12]
 8002bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfe:	4605      	mov	r5, r0
 8002c00:	0710      	lsls	r0, r2, #28
 8002c02:	460c      	mov	r4, r1
 8002c04:	d45a      	bmi.n	8002cbc <__sflush_r+0xc4>
 8002c06:	684b      	ldr	r3, [r1, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	dc05      	bgt.n	8002c18 <__sflush_r+0x20>
 8002c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	dc02      	bgt.n	8002c18 <__sflush_r+0x20>
 8002c12:	2000      	movs	r0, #0
 8002c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c1a:	2e00      	cmp	r6, #0
 8002c1c:	d0f9      	beq.n	8002c12 <__sflush_r+0x1a>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c24:	682f      	ldr	r7, [r5, #0]
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	d033      	beq.n	8002c92 <__sflush_r+0x9a>
 8002c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	075a      	lsls	r2, r3, #29
 8002c30:	d505      	bpl.n	8002c3e <__sflush_r+0x46>
 8002c32:	6863      	ldr	r3, [r4, #4]
 8002c34:	1ac0      	subs	r0, r0, r3
 8002c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c38:	b10b      	cbz	r3, 8002c3e <__sflush_r+0x46>
 8002c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c3c:	1ac0      	subs	r0, r0, r3
 8002c3e:	2300      	movs	r3, #0
 8002c40:	4602      	mov	r2, r0
 8002c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c44:	6a21      	ldr	r1, [r4, #32]
 8002c46:	4628      	mov	r0, r5
 8002c48:	47b0      	blx	r6
 8002c4a:	1c43      	adds	r3, r0, #1
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	d106      	bne.n	8002c5e <__sflush_r+0x66>
 8002c50:	6829      	ldr	r1, [r5, #0]
 8002c52:	291d      	cmp	r1, #29
 8002c54:	d84b      	bhi.n	8002cee <__sflush_r+0xf6>
 8002c56:	4a2b      	ldr	r2, [pc, #172]	; (8002d04 <__sflush_r+0x10c>)
 8002c58:	40ca      	lsrs	r2, r1
 8002c5a:	07d6      	lsls	r6, r2, #31
 8002c5c:	d547      	bpl.n	8002cee <__sflush_r+0xf6>
 8002c5e:	2200      	movs	r2, #0
 8002c60:	6062      	str	r2, [r4, #4]
 8002c62:	04d9      	lsls	r1, r3, #19
 8002c64:	6922      	ldr	r2, [r4, #16]
 8002c66:	6022      	str	r2, [r4, #0]
 8002c68:	d504      	bpl.n	8002c74 <__sflush_r+0x7c>
 8002c6a:	1c42      	adds	r2, r0, #1
 8002c6c:	d101      	bne.n	8002c72 <__sflush_r+0x7a>
 8002c6e:	682b      	ldr	r3, [r5, #0]
 8002c70:	b903      	cbnz	r3, 8002c74 <__sflush_r+0x7c>
 8002c72:	6560      	str	r0, [r4, #84]	; 0x54
 8002c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c76:	602f      	str	r7, [r5, #0]
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d0ca      	beq.n	8002c12 <__sflush_r+0x1a>
 8002c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c80:	4299      	cmp	r1, r3
 8002c82:	d002      	beq.n	8002c8a <__sflush_r+0x92>
 8002c84:	4628      	mov	r0, r5
 8002c86:	f000 f8e1 	bl	8002e4c <_free_r>
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8002c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c92:	6a21      	ldr	r1, [r4, #32]
 8002c94:	2301      	movs	r3, #1
 8002c96:	4628      	mov	r0, r5
 8002c98:	47b0      	blx	r6
 8002c9a:	1c41      	adds	r1, r0, #1
 8002c9c:	d1c6      	bne.n	8002c2c <__sflush_r+0x34>
 8002c9e:	682b      	ldr	r3, [r5, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0c3      	beq.n	8002c2c <__sflush_r+0x34>
 8002ca4:	2b1d      	cmp	r3, #29
 8002ca6:	d001      	beq.n	8002cac <__sflush_r+0xb4>
 8002ca8:	2b16      	cmp	r3, #22
 8002caa:	d101      	bne.n	8002cb0 <__sflush_r+0xb8>
 8002cac:	602f      	str	r7, [r5, #0]
 8002cae:	e7b0      	b.n	8002c12 <__sflush_r+0x1a>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cbc:	690f      	ldr	r7, [r1, #16]
 8002cbe:	2f00      	cmp	r7, #0
 8002cc0:	d0a7      	beq.n	8002c12 <__sflush_r+0x1a>
 8002cc2:	0793      	lsls	r3, r2, #30
 8002cc4:	680e      	ldr	r6, [r1, #0]
 8002cc6:	bf08      	it	eq
 8002cc8:	694b      	ldreq	r3, [r1, #20]
 8002cca:	600f      	str	r7, [r1, #0]
 8002ccc:	bf18      	it	ne
 8002cce:	2300      	movne	r3, #0
 8002cd0:	eba6 0807 	sub.w	r8, r6, r7
 8002cd4:	608b      	str	r3, [r1, #8]
 8002cd6:	f1b8 0f00 	cmp.w	r8, #0
 8002cda:	dd9a      	ble.n	8002c12 <__sflush_r+0x1a>
 8002cdc:	4643      	mov	r3, r8
 8002cde:	463a      	mov	r2, r7
 8002ce0:	6a21      	ldr	r1, [r4, #32]
 8002ce2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	47b0      	blx	r6
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	dc07      	bgt.n	8002cfc <__sflush_r+0x104>
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf2:	81a3      	strh	r3, [r4, #12]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cfc:	4407      	add	r7, r0
 8002cfe:	eba8 0800 	sub.w	r8, r8, r0
 8002d02:	e7e8      	b.n	8002cd6 <__sflush_r+0xde>
 8002d04:	20400001 	.word	0x20400001

08002d08 <_fflush_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	690b      	ldr	r3, [r1, #16]
 8002d0c:	4605      	mov	r5, r0
 8002d0e:	460c      	mov	r4, r1
 8002d10:	b1db      	cbz	r3, 8002d4a <_fflush_r+0x42>
 8002d12:	b118      	cbz	r0, 8002d1c <_fflush_r+0x14>
 8002d14:	6983      	ldr	r3, [r0, #24]
 8002d16:	b90b      	cbnz	r3, 8002d1c <_fflush_r+0x14>
 8002d18:	f7ff fa72 	bl	8002200 <__sinit>
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <_fflush_r+0x48>)
 8002d1e:	429c      	cmp	r4, r3
 8002d20:	d109      	bne.n	8002d36 <_fflush_r+0x2e>
 8002d22:	686c      	ldr	r4, [r5, #4]
 8002d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d28:	b17b      	cbz	r3, 8002d4a <_fflush_r+0x42>
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d32:	f7ff bf61 	b.w	8002bf8 <__sflush_r>
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <_fflush_r+0x4c>)
 8002d38:	429c      	cmp	r4, r3
 8002d3a:	d101      	bne.n	8002d40 <_fflush_r+0x38>
 8002d3c:	68ac      	ldr	r4, [r5, #8]
 8002d3e:	e7f1      	b.n	8002d24 <_fflush_r+0x1c>
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <_fflush_r+0x50>)
 8002d42:	429c      	cmp	r4, r3
 8002d44:	bf08      	it	eq
 8002d46:	68ec      	ldreq	r4, [r5, #12]
 8002d48:	e7ec      	b.n	8002d24 <_fflush_r+0x1c>
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	bd38      	pop	{r3, r4, r5, pc}
 8002d4e:	bf00      	nop
 8002d50:	0800303c 	.word	0x0800303c
 8002d54:	0800305c 	.word	0x0800305c
 8002d58:	0800301c 	.word	0x0800301c

08002d5c <_lseek_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	4c07      	ldr	r4, [pc, #28]	; (8002d7c <_lseek_r+0x20>)
 8002d60:	4605      	mov	r5, r0
 8002d62:	4608      	mov	r0, r1
 8002d64:	4611      	mov	r1, r2
 8002d66:	2200      	movs	r2, #0
 8002d68:	6022      	str	r2, [r4, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 f908 	bl	8002f80 <_lseek>
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	d102      	bne.n	8002d7a <_lseek_r+0x1e>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	b103      	cbz	r3, 8002d7a <_lseek_r+0x1e>
 8002d78:	602b      	str	r3, [r5, #0]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	20000114 	.word	0x20000114

08002d80 <__swhatbuf_r>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	460e      	mov	r6, r1
 8002d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d88:	2900      	cmp	r1, #0
 8002d8a:	b090      	sub	sp, #64	; 0x40
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	461d      	mov	r5, r3
 8002d90:	da07      	bge.n	8002da2 <__swhatbuf_r+0x22>
 8002d92:	2300      	movs	r3, #0
 8002d94:	602b      	str	r3, [r5, #0]
 8002d96:	89b3      	ldrh	r3, [r6, #12]
 8002d98:	061a      	lsls	r2, r3, #24
 8002d9a:	d410      	bmi.n	8002dbe <__swhatbuf_r+0x3e>
 8002d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da0:	e00e      	b.n	8002dc0 <__swhatbuf_r+0x40>
 8002da2:	aa01      	add	r2, sp, #4
 8002da4:	f000 f8b2 	bl	8002f0c <_fstat_r>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	dbf2      	blt.n	8002d92 <__swhatbuf_r+0x12>
 8002dac:	9a02      	ldr	r2, [sp, #8]
 8002dae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002db2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002db6:	425a      	negs	r2, r3
 8002db8:	415a      	adcs	r2, r3
 8002dba:	602a      	str	r2, [r5, #0]
 8002dbc:	e7ee      	b.n	8002d9c <__swhatbuf_r+0x1c>
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	6023      	str	r3, [r4, #0]
 8002dc4:	b010      	add	sp, #64	; 0x40
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}

08002dc8 <__smakebuf_r>:
 8002dc8:	898b      	ldrh	r3, [r1, #12]
 8002dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dcc:	079d      	lsls	r5, r3, #30
 8002dce:	4606      	mov	r6, r0
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	d507      	bpl.n	8002de4 <__smakebuf_r+0x1c>
 8002dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	6123      	str	r3, [r4, #16]
 8002ddc:	2301      	movs	r3, #1
 8002dde:	6163      	str	r3, [r4, #20]
 8002de0:	b002      	add	sp, #8
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	ab01      	add	r3, sp, #4
 8002de6:	466a      	mov	r2, sp
 8002de8:	f7ff ffca 	bl	8002d80 <__swhatbuf_r>
 8002dec:	9900      	ldr	r1, [sp, #0]
 8002dee:	4605      	mov	r5, r0
 8002df0:	4630      	mov	r0, r6
 8002df2:	f7ff fa97 	bl	8002324 <_malloc_r>
 8002df6:	b948      	cbnz	r0, 8002e0c <__smakebuf_r+0x44>
 8002df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfc:	059a      	lsls	r2, r3, #22
 8002dfe:	d4ef      	bmi.n	8002de0 <__smakebuf_r+0x18>
 8002e00:	f023 0303 	bic.w	r3, r3, #3
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	e7e3      	b.n	8002dd4 <__smakebuf_r+0xc>
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <__smakebuf_r+0x7c>)
 8002e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	6020      	str	r0, [r4, #0]
 8002e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e18:	81a3      	strh	r3, [r4, #12]
 8002e1a:	9b00      	ldr	r3, [sp, #0]
 8002e1c:	6163      	str	r3, [r4, #20]
 8002e1e:	9b01      	ldr	r3, [sp, #4]
 8002e20:	6120      	str	r0, [r4, #16]
 8002e22:	b15b      	cbz	r3, 8002e3c <__smakebuf_r+0x74>
 8002e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f000 f881 	bl	8002f30 <_isatty_r>
 8002e2e:	b128      	cbz	r0, 8002e3c <__smakebuf_r+0x74>
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	81a3      	strh	r3, [r4, #12]
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	431d      	orrs	r5, r3
 8002e40:	81a5      	strh	r5, [r4, #12]
 8002e42:	e7cd      	b.n	8002de0 <__smakebuf_r+0x18>
 8002e44:	08002181 	.word	0x08002181

08002e48 <__malloc_lock>:
 8002e48:	4770      	bx	lr

08002e4a <__malloc_unlock>:
 8002e4a:	4770      	bx	lr

08002e4c <_free_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4605      	mov	r5, r0
 8002e50:	2900      	cmp	r1, #0
 8002e52:	d045      	beq.n	8002ee0 <_free_r+0x94>
 8002e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e58:	1f0c      	subs	r4, r1, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bfb8      	it	lt
 8002e5e:	18e4      	addlt	r4, r4, r3
 8002e60:	f7ff fff2 	bl	8002e48 <__malloc_lock>
 8002e64:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <_free_r+0x98>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	4610      	mov	r0, r2
 8002e6a:	b933      	cbnz	r3, 8002e7a <_free_r+0x2e>
 8002e6c:	6063      	str	r3, [r4, #4]
 8002e6e:	6014      	str	r4, [r2, #0]
 8002e70:	4628      	mov	r0, r5
 8002e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e76:	f7ff bfe8 	b.w	8002e4a <__malloc_unlock>
 8002e7a:	42a3      	cmp	r3, r4
 8002e7c:	d90c      	bls.n	8002e98 <_free_r+0x4c>
 8002e7e:	6821      	ldr	r1, [r4, #0]
 8002e80:	1862      	adds	r2, r4, r1
 8002e82:	4293      	cmp	r3, r2
 8002e84:	bf04      	itt	eq
 8002e86:	681a      	ldreq	r2, [r3, #0]
 8002e88:	685b      	ldreq	r3, [r3, #4]
 8002e8a:	6063      	str	r3, [r4, #4]
 8002e8c:	bf04      	itt	eq
 8002e8e:	1852      	addeq	r2, r2, r1
 8002e90:	6022      	streq	r2, [r4, #0]
 8002e92:	6004      	str	r4, [r0, #0]
 8002e94:	e7ec      	b.n	8002e70 <_free_r+0x24>
 8002e96:	4613      	mov	r3, r2
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	b10a      	cbz	r2, 8002ea0 <_free_r+0x54>
 8002e9c:	42a2      	cmp	r2, r4
 8002e9e:	d9fa      	bls.n	8002e96 <_free_r+0x4a>
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	1858      	adds	r0, r3, r1
 8002ea4:	42a0      	cmp	r0, r4
 8002ea6:	d10b      	bne.n	8002ec0 <_free_r+0x74>
 8002ea8:	6820      	ldr	r0, [r4, #0]
 8002eaa:	4401      	add	r1, r0
 8002eac:	1858      	adds	r0, r3, r1
 8002eae:	4282      	cmp	r2, r0
 8002eb0:	6019      	str	r1, [r3, #0]
 8002eb2:	d1dd      	bne.n	8002e70 <_free_r+0x24>
 8002eb4:	6810      	ldr	r0, [r2, #0]
 8002eb6:	6852      	ldr	r2, [r2, #4]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	4401      	add	r1, r0
 8002ebc:	6019      	str	r1, [r3, #0]
 8002ebe:	e7d7      	b.n	8002e70 <_free_r+0x24>
 8002ec0:	d902      	bls.n	8002ec8 <_free_r+0x7c>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	e7d3      	b.n	8002e70 <_free_r+0x24>
 8002ec8:	6820      	ldr	r0, [r4, #0]
 8002eca:	1821      	adds	r1, r4, r0
 8002ecc:	428a      	cmp	r2, r1
 8002ece:	bf04      	itt	eq
 8002ed0:	6811      	ldreq	r1, [r2, #0]
 8002ed2:	6852      	ldreq	r2, [r2, #4]
 8002ed4:	6062      	str	r2, [r4, #4]
 8002ed6:	bf04      	itt	eq
 8002ed8:	1809      	addeq	r1, r1, r0
 8002eda:	6021      	streq	r1, [r4, #0]
 8002edc:	605c      	str	r4, [r3, #4]
 8002ede:	e7c7      	b.n	8002e70 <_free_r+0x24>
 8002ee0:	bd38      	pop	{r3, r4, r5, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000090 	.word	0x20000090

08002ee8 <_read_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4c07      	ldr	r4, [pc, #28]	; (8002f08 <_read_r+0x20>)
 8002eec:	4605      	mov	r5, r0
 8002eee:	4608      	mov	r0, r1
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	6022      	str	r2, [r4, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 f84a 	bl	8002f90 <_read>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_read_r+0x1e>
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_read_r+0x1e>
 8002f04:	602b      	str	r3, [r5, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	20000114 	.word	0x20000114

08002f0c <_fstat_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	4c07      	ldr	r4, [pc, #28]	; (8002f2c <_fstat_r+0x20>)
 8002f10:	2300      	movs	r3, #0
 8002f12:	4605      	mov	r5, r0
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	6023      	str	r3, [r4, #0]
 8002f1a:	f000 f821 	bl	8002f60 <_fstat>
 8002f1e:	1c43      	adds	r3, r0, #1
 8002f20:	d102      	bne.n	8002f28 <_fstat_r+0x1c>
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	b103      	cbz	r3, 8002f28 <_fstat_r+0x1c>
 8002f26:	602b      	str	r3, [r5, #0]
 8002f28:	bd38      	pop	{r3, r4, r5, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000114 	.word	0x20000114

08002f30 <_isatty_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4c06      	ldr	r4, [pc, #24]	; (8002f4c <_isatty_r+0x1c>)
 8002f34:	2300      	movs	r3, #0
 8002f36:	4605      	mov	r5, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	6023      	str	r3, [r4, #0]
 8002f3c:	f000 f818 	bl	8002f70 <_isatty>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_isatty_r+0x1a>
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_isatty_r+0x1a>
 8002f48:	602b      	str	r3, [r5, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20000114 	.word	0x20000114

08002f50 <_close>:
 8002f50:	4b02      	ldr	r3, [pc, #8]	; (8002f5c <_close+0xc>)
 8002f52:	2258      	movs	r2, #88	; 0x58
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f5a:	4770      	bx	lr
 8002f5c:	20000114 	.word	0x20000114

08002f60 <_fstat>:
 8002f60:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <_fstat+0xc>)
 8002f62:	2258      	movs	r2, #88	; 0x58
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f6a:	4770      	bx	lr
 8002f6c:	20000114 	.word	0x20000114

08002f70 <_isatty>:
 8002f70:	4b02      	ldr	r3, [pc, #8]	; (8002f7c <_isatty+0xc>)
 8002f72:	2258      	movs	r2, #88	; 0x58
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	2000      	movs	r0, #0
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000114 	.word	0x20000114

08002f80 <_lseek>:
 8002f80:	4b02      	ldr	r3, [pc, #8]	; (8002f8c <_lseek+0xc>)
 8002f82:	2258      	movs	r2, #88	; 0x58
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f8a:	4770      	bx	lr
 8002f8c:	20000114 	.word	0x20000114

08002f90 <_read>:
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <_read+0xc>)
 8002f92:	2258      	movs	r2, #88	; 0x58
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9a:	4770      	bx	lr
 8002f9c:	20000114 	.word	0x20000114

08002fa0 <_sbrk>:
 8002fa0:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <_sbrk+0x14>)
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	b909      	cbnz	r1, 8002fac <_sbrk+0xc>
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <_sbrk+0x18>)
 8002faa:	6019      	str	r1, [r3, #0]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	4402      	add	r2, r0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	4770      	bx	lr
 8002fb4:	20000098 	.word	0x20000098
 8002fb8:	20000118 	.word	0x20000118

08002fbc <_init>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr

08002fc8 <_fini>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr
